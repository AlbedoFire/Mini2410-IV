; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\sdram\glib.o --asm_dir=.\SDRAM\ --list_dir=.\SDRAM\ --depend=.\sdram\glib.d --cpu=ARM920T --apcs=interwork -O3 --diag_suppress=9931 -I..\Common\Inc -I.\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Samsung -D__UVISION_VERSION=517 --omf_browse=.\sdram\glib.crf Source\glib.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  BitmapViewTft16Bit_800600 PROC
;;;485    }
;;;486    void BitmapViewTft16Bit_800600(UINT8T *pBuffer)
000000  e12fff1e          BX       lr
;;;487    {
;;;488        
;;;489    }
;;;490    
                          ENDP

                  _PutTft16Bit_800600 PROC
;;;365    *********************************************************************************************/
;;;366    void _PutTft16Bit_800600(UINT32T x,UINT32T y,UINT32T c)
000004  e3500d19          CMP      r0,#0x640
;;;367    {
000008  e92d0030          PUSH     {r4,r5}
;;;368        if(x<SCR_XSIZE_TFT_800600 && y<SCR_YSIZE_TFT_800600)
00000c  33510e4b          CMPCC    r1,#0x4b0
000010  2a00000f          BCS      |L1.84|
;;;369            frameBuffer16BitTft800600[(y)][(x)/2]=( frameBuffer16BitTft800600[(y)][x/2]
000014  e59fcc8c          LDR      r12,|L1.3240|
000018  e0815181          ADD      r5,r1,r1,LSL #3
00001c  e59c4000          LDR      r4,[r12,#0]  ; frameBuffer16BitTft800600
000020  e0855201          ADD      r5,r5,r1,LSL #4
000024  e1a030a0          LSR      r3,r0,#1
000028  e2001001          AND      r1,r0,#1
00002c  e0840385          ADD      r0,r4,r5,LSL #7
000030  e59fcc74          LDR      r12,|L1.3244|
000034  e1a04201          LSL      r4,r1,#4
000038  e7905103          LDR      r5,[r0,r3,LSL #2]
00003c  e002282c          AND      r2,r2,r12,LSR #16
000040  e2611001          RSB      r1,r1,#1
000044  e1c5c43c          BIC      r12,r5,r12,LSR r4
000048  e1a01201          LSL      r1,r1,#4
00004c  e18c1112          ORR      r1,r12,r2,LSL r1
000050  e7801103          STR      r1,[r0,r3,LSL #2]
                  |L1.84|
;;;370            & ~(0xffff0000>>((x)%2)*16) ) | ( (c&0x0000ffff)<<((2-1-((x)%2))*16) );
;;;371    }
000054  e8bd0030          POP      {r4,r5}
000058  e12fff1e          BX       lr
;;;372    
                          ENDP

                  BitmapViewTft8Bit_800600 PROC
;;;481    }
;;;482    void BitmapViewTft8Bit_800600(UINT8T *pBuffer)
00005c  e12fff1e          BX       lr
;;;483    {
;;;484        
;;;485    }
;;;486    void BitmapViewTft16Bit_800600(UINT8T *pBuffer)
                          ENDP

                  _PutTft8Bit_800600 PROC
;;;347    *********************************************************************************************/
;;;348    void _PutTft8Bit_800600(UINT32T x,UINT32T y,UINT32T c)
000060  e3500d19          CMP      r0,#0x640
;;;349    {
000064  e92d0030          PUSH     {r4,r5}
;;;350        if(x<SCR_XSIZE_TFT_800600 && y<SCR_YSIZE_TFT_800600)
000068  33510e4b          CMPCC    r1,#0x4b0
00006c  2a00000f          BCS      |L1.176|
;;;351            frameBuffer8BitTft800600[(y)][(x)/4]=( frameBuffer8BitTft800600[(y)][x/4]
000070  e59fcc38          LDR      r12,|L1.3248|
000074  e0815181          ADD      r5,r1,r1,LSL #3
000078  e59c4000          LDR      r4,[r12,#0]  ; frameBuffer8BitTft800600
00007c  e0855201          ADD      r5,r5,r1,LSL #4
000080  e3c03003          BIC      r3,r0,#3
000084  e2001003          AND      r1,r0,#3
000088  e0840305          ADD      r0,r4,r5,LSL #6
00008c  e1a04181          LSL      r4,r1,#3
000090  e7905003          LDR      r5,[r0,r3]
000094  e3a0c4ff          MOV      r12,#0xff000000
000098  e2611003          RSB      r1,r1,#3
00009c  e1c5c43c          BIC      r12,r5,r12,LSR r4
0000a0  e20220ff          AND      r2,r2,#0xff
0000a4  e1a01181          LSL      r1,r1,#3
0000a8  e18c1112          ORR      r1,r12,r2,LSL r1
0000ac  e7801003          STR      r1,[r0,r3]
                  |L1.176|
;;;352            & ~(0xff000000>>((x)%4)*8) ) | ( (c&0x000000ff)<<((4-1-((x)%4))*8) );
;;;353    }
0000b0  e8bd0030          POP      {r4,r5}
0000b4  e12fff1e          BX       lr
;;;354    
                          ENDP

                  BitmapViewTft1Bit_800600 PROC
                  |L1.184|
;;;477    }
;;;478    void BitmapViewTft1Bit_800600(UINT8T *pBuffer)
0000b8  e12fff1e          BX       lr
;;;479    {
;;;480        
;;;481    }
;;;482    void BitmapViewTft8Bit_800600(UINT8T *pBuffer)
                          ENDP

                  _PutTft1Bit_800600 PROC
;;;329    *********************************************************************************************/
;;;330    void _PutTft1Bit_800600(UINT32T x,UINT32T y,UINT32T c)
0000bc  e3500d19          CMP      r0,#0x640
;;;331    {
0000c0  e92d0030          PUSH     {r4,r5}
;;;332        if(x<SCR_XSIZE_TFT_800600 && y<SCR_YSIZE_TFT_800600)
0000c4  33510e4b          CMPCC    r1,#0x4b0
0000c8  2a00000e          BCS      |L1.264|
;;;333            frameBuffer1BitTft800600[(y)][(x)/32]=( frameBuffer1BitTft800600[(y)][x/32]
0000cc  e59fcbe0          LDR      r12,|L1.3252|
0000d0  e0815181          ADD      r5,r1,r1,LSL #3
0000d4  e59c4000          LDR      r4,[r12,#0]  ; frameBuffer1BitTft800600
0000d8  e0855201          ADD      r5,r5,r1,LSL #4
0000dc  e200101f          AND      r1,r0,#0x1f
0000e0  e1a032a0          LSR      r3,r0,#5
0000e4  e3a0c102          MOV      r12,#0x80000000
0000e8  e0840185          ADD      r0,r4,r5,LSL #3
0000ec  e1a0c13c          LSR      r12,r12,r1
0000f0  e7904103          LDR      r4,[r0,r3,LSL #2]
0000f4  e2022001          AND      r2,r2,#1
0000f8  e261101f          RSB      r1,r1,#0x1f
0000fc  e1c4c00c          BIC      r12,r4,r12
000100  e18c1112          ORR      r1,r12,r2,LSL r1
000104  e7801103          STR      r1,[r0,r3,LSL #2]
                  |L1.264|
;;;334    	& ~(0x80000000>>((x)%32)*1) ) | ( (c&0x00000001)<< ((32-1-((x)%32))*1) );
;;;335    }
000108  e8bd0030          POP      {r4,r5}
00010c  e12fff1e          BX       lr
;;;336    
                          ENDP

                  BitmapViewTft24Bit_640480 PROC
                  |L1.272|
;;;473    }
;;;474    void BitmapViewTft24Bit_640480(UINT8T *pBuffer)
000110  e12fff1e          BX       lr
;;;475    {
;;;476        
;;;477    }
;;;478    void BitmapViewTft1Bit_800600(UINT8T *pBuffer)
                          ENDP

                  _PutTft24Bit_640480 PROC
;;;311    *********************************************************************************************/
;;;312    void _PutTft24Bit_640480(UINT32T x,UINT32T y,UINT32T c)
000114  e3500c05          CMP      r0,#0x500
;;;313    {
;;;314        if(x<SCR_XSIZE_TFT_640480 && y<SCR_YSIZE_TFT_640480)
000118  33510d0f          CMPCC    r1,#0x3c0
;;;315            frameBuffer24BitTft640480[(y)][(x)]=( frameBuffer24BitTft640480[(y)][(x)]
;;;316            & (0x0) | ( c&0xffffff00)); // | ( c&0x00ffffff)); LSB 
;;;317    }
00011c  212fff1e          BXCS     lr
000120  e081c101          ADD      r12,r1,r1,LSL #2      ;315
000124  e3c210ff          BIC      r1,r2,#0xff           ;315
000128  e59f3b88          LDR      r3,|L1.3256|
00012c  e5933000          LDR      r3,[r3,#0]            ;315  ; frameBuffer24BitTft640480
000130  e083250c          ADD      r2,r3,r12,LSL #10     ;315
000134  e7821100          STR      r1,[r2,r0,LSL #2]     ;315
000138  e12fff1e          BX       lr
;;;318    
                          ENDP

                  BitmapViewTft16Bit_800480 PROC
;;;454    
;;;455    void BitmapViewTft16Bit_800480(UINT8T *pBuffer)
00013c  e92d0070          PUSH     {r4-r6}
;;;456    {
;;;457       UINT32T i, j;
;;;458    	UINT32T *pView = (UINT32T*)frameBuffer16BitTft800480;
000140  e59f1b74          LDR      r1,|L1.3260|
;;;459    
;;;460    	for (i = 0; i < LCD_YSIZE_TFT_800480; i++)
000144  e3a02000          MOV      r2,#0
000148  e5913000          LDR      r3,[r1,#0]            ;458  ; frameBuffer16BitTft800480
                  |L1.332|
;;;461    	{
;;;462    	   for (j = 0; j < LCD_XSIZE_TFT_800480/2 ; j++)
00014c  e3a01000          MOV      r1,#0
                  |L1.336|
;;;463    	    {
;;;464    	      
;;;465    	      pView[j] = ((*(pBuffer+1)) << 24) + ((*(pBuffer)) << 16) + ((*(pBuffer+3)) << 8) + (*(pBuffer+2));
000150  e5d06001          LDRB     r6,[r0,#1]
000154  e4d0c003          LDRB     r12,[r0],#3
000158  e4504001          LDRB     r4,[r0],#-1
00015c  e4d05002          LDRB     r5,[r0],#2
000160  e1a06c06          LSL      r6,r6,#24
000164  e086c80c          ADD      r12,r6,r12,LSL #16
000168  e08cc404          ADD      r12,r12,r4,LSL #8
00016c  e08cc005          ADD      r12,r12,r5
000170  e783c101          STR      r12,[r3,r1,LSL #2]
000174  e2811001          ADD      r1,r1,#1
000178  e3510e19          CMP      r1,#0x190             ;462
00017c  3afffff3          BCC      |L1.336|
000180  e2822001          ADD      r2,r2,#1              ;462
000184  e3520e1e          CMP      r2,#0x1e0             ;460
000188  e2833d32          ADD      r3,r3,#0xc80          ;460
00018c  3affffee          BCC      |L1.332|
;;;466    		 
;;;467    		  pBuffer += 4;
;;;468    	    
;;;469    	    }
;;;470    	    pView+=LCD_XSIZE_TFT_800480;
;;;471    	}
;;;472       
;;;473    }
000190  e8bd0070          POP      {r4-r6}
000194  e12fff1e          BX       lr
;;;474    void BitmapViewTft24Bit_640480(UINT8T *pBuffer)
                          ENDP

                  _PutTft16Bit_800480 PROC
;;;293    
;;;294    void _PutTft16Bit_800480(UINT32T x,UINT32T y,UINT32T c)
000198  e3500d19          CMP      r0,#0x640
;;;295    {
00019c  e92d0030          PUSH     {r4,r5}
;;;296        if(x<SCR_XSIZE_TFT_800480 && y<SCR_YSIZE_TFT_800480)
0001a0  33510d0f          CMPCC    r1,#0x3c0
0001a4  2a00000f          BCS      |L1.488|
;;;297          frameBuffer16BitTft800480[(y)][(x)/2]=( frameBuffer16BitTft800480[(y)][x/2]
0001a8  e59fcb0c          LDR      r12,|L1.3260|
0001ac  e0815181          ADD      r5,r1,r1,LSL #3
0001b0  e59c4000          LDR      r4,[r12,#0]  ; frameBuffer16BitTft800480
0001b4  e0855201          ADD      r5,r5,r1,LSL #4
0001b8  e1a030a0          LSR      r3,r0,#1
0001bc  e2001001          AND      r1,r0,#1
0001c0  e0840385          ADD      r0,r4,r5,LSL #7
0001c4  e59fcae0          LDR      r12,|L1.3244|
0001c8  e1a04201          LSL      r4,r1,#4
0001cc  e7905103          LDR      r5,[r0,r3,LSL #2]
0001d0  e002282c          AND      r2,r2,r12,LSR #16
0001d4  e2611001          RSB      r1,r1,#1
0001d8  e1c5c43c          BIC      r12,r5,r12,LSR r4
0001dc  e1a01201          LSL      r1,r1,#4
0001e0  e18c1112          ORR      r1,r12,r2,LSL r1
0001e4  e7801103          STR      r1,[r0,r3,LSL #2]
                  |L1.488|
;;;298            & ~(0xffff0000>>((x)%2)*16) ) | ( (c&0x0000ffff)<<((2-1-((x)%2))*16) );				 
;;;299    
;;;300    }
0001e8  e8bd0030          POP      {r4,r5}
0001ec  e12fff1e          BX       lr
;;;301    
                          ENDP

                  BitmapViewTft16Bit_640480 PROC
;;;431    
;;;432    void BitmapViewTft16Bit_640480(UINT8T *pBuffer)
0001f0  e92d0070          PUSH     {r4-r6}
;;;433    {
;;;434        UINT32T i, j;
;;;435    	UINT32T *pView = (UINT32T*)frameBuffer16BitTft640480;
0001f4  e59f1ac4          LDR      r1,|L1.3264|
;;;436    
;;;437    	for (i = 0; i < LCD_YSIZE_TFT_640480; i++)
0001f8  e3a02000          MOV      r2,#0
0001fc  e5913000          LDR      r3,[r1,#0]            ;435  ; frameBuffer16BitTft640480
                  |L1.512|
;;;438    	{
;;;439    	   
;;;440    	   
;;;441    	  for (j = 0; j < LCD_XSIZE_TFT_640480/2 ; j++)
000200  e3a01000          MOV      r1,#0
                  |L1.516|
;;;442    	    {
;;;443    	      
;;;444    	      pView[j] = ((*(pBuffer+3)) << 24) + ((*(pBuffer+2)) << 16) + ((*(pBuffer+1)) << 8) + (*(pBuffer));
000204  e5d06003          LDRB     r6,[r0,#3]
000208  e5d0c002          LDRB     r12,[r0,#2]
00020c  e5d04001          LDRB     r4,[r0,#1]
000210  e4d05004          LDRB     r5,[r0],#4
000214  e1a06c06          LSL      r6,r6,#24
000218  e086c80c          ADD      r12,r6,r12,LSL #16
00021c  e08cc404          ADD      r12,r12,r4,LSL #8
000220  e08cc005          ADD      r12,r12,r5
000224  e783c101          STR      r12,[r3,r1,LSL #2]
000228  e2811001          ADD      r1,r1,#1
00022c  e3510d05          CMP      r1,#0x140             ;441
000230  3afffff3          BCC      |L1.516|
000234  e2822001          ADD      r2,r2,#1              ;441
000238  e3520e1e          CMP      r2,#0x1e0             ;437
00023c  e2833c0a          ADD      r3,r3,#0xa00          ;437
000240  3affffee          BCC      |L1.512|
;;;445    		 
;;;446    		  pBuffer += 4;
;;;447    	    
;;;448    	    }
;;;449    	    pView+=LCD_XSIZE_TFT_640480;
;;;450    	}
;;;451    
;;;452        
;;;453    }
000244  e8bd0070          POP      {r4-r6}
000248  e12fff1e          BX       lr
;;;454    
                          ENDP

                  _PutTft16Bit_640480 PROC
                  |L1.588|
;;;285    *********************************************************************************************/
;;;286    void _PutTft16Bit_640480(UINT32T x,UINT32T y,UINT32T c)
00024c  e3500c05          CMP      r0,#0x500
;;;287    {
000250  e92d0030          PUSH     {r4,r5}
;;;288        if(x<SCR_XSIZE_TFT_640480 && y<SCR_YSIZE_TFT_640480)
000254  33510d0f          CMPCC    r1,#0x3c0
000258  2a00000e          BCS      |L1.664|
;;;289          frameBuffer16BitTft640480[(y)][(x)/2]=( frameBuffer16BitTft640480[(y)][x/2]
00025c  e59f3a5c          LDR      r3,|L1.3264|
000260  e081c101          ADD      r12,r1,r1,LSL #2
000264  e5935000          LDR      r5,[r3,#0]  ; frameBuffer16BitTft640480
000268  e59f3a3c          LDR      r3,|L1.3244|
00026c  e1a010a0          LSR      r1,r0,#1
000270  e0024823          AND      r4,r2,r3,LSR #16
000274  e085248c          ADD      r2,r5,r12,LSL #9
000278  e2000001          AND      r0,r0,#1
00027c  e1a0c200          LSL      r12,r0,#4
000280  e7925101          LDR      r5,[r2,r1,LSL #2]
000284  e2600001          RSB      r0,r0,#1
000288  e1c53c33          BIC      r3,r5,r3,LSR r12
00028c  e1a00200          LSL      r0,r0,#4
000290  e1830014          ORR      r0,r3,r4,LSL r0
000294  e7820101          STR      r0,[r2,r1,LSL #2]
                  |L1.664|
;;;290            & ~(0xffff0000>>((x)%2)*16) ) | ( (c&0x0000ffff)<<((2-1-((x)%2))*16) );				 
;;;291    
;;;292    }
000298  e8bd0030          POP      {r4,r5}
00029c  e12fff1e          BX       lr
;;;293    
                          ENDP

                  BitmapViewTft8Bit_640480 PROC
                  |L1.672|
;;;426    }
;;;427    void BitmapViewTft8Bit_640480(UINT8T *pBuffer)
0002a0  e12fff1e          BX       lr
;;;428    {
;;;429        
;;;430    }
;;;431    
                          ENDP

                  _PutTft8Bit_640480 PROC
;;;268    *********************************************************************************************/
;;;269    void _PutTft8Bit_640480(UINT32T x,UINT32T y,UINT32T c)
0002a4  e3500c05          CMP      r0,#0x500
;;;270    {
0002a8  e92d0030          PUSH     {r4,r5}
;;;271        if(x<SCR_XSIZE_TFT_640480 && y<SCR_YSIZE_TFT_640480)
0002ac  33510d0f          CMPCC    r1,#0x3c0
0002b0  2a00000e          BCS      |L1.752|
;;;272            frameBuffer8BitTft640480[(y)][(x)/4]=( frameBuffer8BitTft640480[(y)][x/4]
0002b4  e59f3a08          LDR      r3,|L1.3268|
0002b8  e081c101          ADD      r12,r1,r1,LSL #2
0002bc  e5935000          LDR      r5,[r3,#0]  ; frameBuffer8BitTft640480
0002c0  e3c01003          BIC      r1,r0,#3
0002c4  e20240ff          AND      r4,r2,#0xff
0002c8  e085240c          ADD      r2,r5,r12,LSL #8
0002cc  e2000003          AND      r0,r0,#3
0002d0  e1a0c180          LSL      r12,r0,#3
0002d4  e7925001          LDR      r5,[r2,r1]
0002d8  e3a034ff          MOV      r3,#0xff000000
0002dc  e2600003          RSB      r0,r0,#3
0002e0  e1c53c33          BIC      r3,r5,r3,LSR r12
0002e4  e1a00180          LSL      r0,r0,#3
0002e8  e1830014          ORR      r0,r3,r4,LSL r0
0002ec  e7820001          STR      r0,[r2,r1]
                  |L1.752|
;;;273            & ~(0xff000000>>((x)%4)*8) ) | ( (c&0x000000ff)<<((4-1-((x)%4))*8) );
;;;274    }
0002f0  e8bd0030          POP      {r4,r5}
0002f4  e12fff1e          BX       lr
;;;275    
                          ENDP

                  BitmapViewTft1Bit_640480 PROC
                  |L1.760|
;;;422    }  	
;;;423    void BitmapViewTft1Bit_640480(UINT8T *pBuffer)
0002f8  e12fff1e          BX       lr
;;;424    {
;;;425        
;;;426    }
;;;427    void BitmapViewTft8Bit_640480(UINT8T *pBuffer)
                          ENDP

                  _PutTft1Bit_640480 PROC
                  |L1.764|
;;;251    *********************************************************************************************/
;;;252    void _PutTft1Bit_640480(UINT32T x,UINT32T y,UINT32T c)
0002fc  e3500c05          CMP      r0,#0x500
;;;253    {
000300  e92d0030          PUSH     {r4,r5}
;;;254        if(x<SCR_XSIZE_TFT_640480 && y<SCR_YSIZE_TFT_640480)
000304  33510d0f          CMPCC    r1,#0x3c0
000308  2a00000c          BCS      |L1.832|
;;;255            frameBuffer1BitTft640480[(y)][(x)/32]=( frameBuffer1BitTft640480[(y)][x/32]
00030c  e59f39b4          LDR      r3,|L1.3272|
000310  e0814101          ADD      r4,r1,r1,LSL #2
000314  e5933000          LDR      r3,[r3,#0]  ; frameBuffer1BitTft640480
000318  e200101f          AND      r1,r0,#0x1f
00031c  e0833284          ADD      r3,r3,r4,LSL #5
000320  e1a002a0          LSR      r0,r0,#5
000324  e7935100          LDR      r5,[r3,r0,LSL #2]
000328  e3a0c102          MOV      r12,#0x80000000
00032c  e261401f          RSB      r4,r1,#0x1f
000330  e1c5113c          BIC      r1,r5,r12,LSR r1
000334  e2022001          AND      r2,r2,#1
000338  e1811412          ORR      r1,r1,r2,LSL r4
00033c  e7831100          STR      r1,[r3,r0,LSL #2]
                  |L1.832|
;;;256    	& ~(0x80000000>>((x)%32)*1) ) | ( (c&0x00000001)<< ((32-1-((x)%32))*1) );
;;;257    }
000340  e8bd0030          POP      {r4,r5}
000344  e12fff1e          BX       lr
;;;258    
                          ENDP

                  BitmapViewTft16Bit_240320 PROC
;;;418    }
;;;419    void BitmapViewTft16Bit_240320(UINT8T *pBuffer)
000348  e12fff1e          BX       lr
;;;420    {
;;;421        
;;;422    }  	
;;;423    void BitmapViewTft1Bit_640480(UINT8T *pBuffer)
                          ENDP

                  _PutTft16Bit_240320 PROC
;;;234    *********************************************************************************************/
;;;235    void _PutTft16Bit_240320(UINT32T x,UINT32T y,UINT32T c)
00034c  e3500e1e          CMP      r0,#0x1e0
;;;236    {
000350  e92d0030          PUSH     {r4,r5}
;;;237        if(x<SCR_XSIZE_TFT_240320 && y<SCR_YSIZE_TFT_240320)
000354  33510d0a          CMPCC    r1,#0x280
000358  2a00000e          BCS      |L1.920|
;;;238            frameBuffer16BitTft240320[(y)][(x)/2]=( frameBuffer16BitTft240320[(y)][x/2]
00035c  e59f3968          LDR      r3,|L1.3276|
000360  e061c201          RSB      r12,r1,r1,LSL #4
000364  e5935000          LDR      r5,[r3,#0]  ; frameBuffer16BitTft240320
000368  e59f393c          LDR      r3,|L1.3244|
00036c  e1a010a0          LSR      r1,r0,#1
000370  e0024823          AND      r4,r2,r3,LSR #16
000374  e085230c          ADD      r2,r5,r12,LSL #6
000378  e2000001          AND      r0,r0,#1
00037c  e1a0c200          LSL      r12,r0,#4
000380  e7925101          LDR      r5,[r2,r1,LSL #2]
000384  e2600001          RSB      r0,r0,#1
000388  e1c53c33          BIC      r3,r5,r3,LSR r12
00038c  e1a00200          LSL      r0,r0,#4
000390  e1830014          ORR      r0,r3,r4,LSL r0
000394  e7820101          STR      r0,[r2,r1,LSL #2]
                  |L1.920|
;;;239            & ~(0xffff0000>>((x)%2)*16) ) | ( (c&0x0000ffff)<<((2-1-((x)%2))*16) );
;;;240    }
000398  e8bd0030          POP      {r4,r5}
00039c  e12fff1e          BX       lr
;;;241    
                          ENDP

                  BitmapViewTft8Bit_240320 PROC
                  |L1.928|
;;;414    }
;;;415    void BitmapViewTft8Bit_240320(UINT8T *pBuffer)
0003a0  e12fff1e          BX       lr
;;;416    {
;;;417        
;;;418    }
;;;419    void BitmapViewTft16Bit_240320(UINT8T *pBuffer)
                          ENDP

                  _PutTft8Bit_240320 PROC
                  |L1.932|
;;;217    *********************************************************************************************/
;;;218    void _PutTft8Bit_240320(UINT32T x,UINT32T y,UINT32T c)
0003a4  e3500e1e          CMP      r0,#0x1e0
;;;219    {
0003a8  e92d0030          PUSH     {r4,r5}
;;;220        if(x<SCR_XSIZE_TFT_240320 && y<SCR_YSIZE_TFT_240320)
0003ac  33510d0a          CMPCC    r1,#0x280
0003b0  2a00000e          BCS      |L1.1008|
;;;221            frameBuffer8BitTft240320[(y)][(x)/4]=( frameBuffer8BitTft240320[(y)][x/4]
0003b4  e59f3914          LDR      r3,|L1.3280|
0003b8  e061c201          RSB      r12,r1,r1,LSL #4
0003bc  e5935000          LDR      r5,[r3,#0]  ; frameBuffer8BitTft240320
0003c0  e3c01003          BIC      r1,r0,#3
0003c4  e20240ff          AND      r4,r2,#0xff
0003c8  e085228c          ADD      r2,r5,r12,LSL #5
0003cc  e2000003          AND      r0,r0,#3
0003d0  e1a0c180          LSL      r12,r0,#3
0003d4  e7925001          LDR      r5,[r2,r1]
0003d8  e3a034ff          MOV      r3,#0xff000000
0003dc  e2600003          RSB      r0,r0,#3
0003e0  e1c53c33          BIC      r3,r5,r3,LSR r12
0003e4  e1a00180          LSL      r0,r0,#3
0003e8  e1830014          ORR      r0,r3,r4,LSL r0
0003ec  e7820001          STR      r0,[r2,r1]
                  |L1.1008|
;;;222            & ~(0xff000000>>((x)%4)*8) ) | ( (c&0x000000ff)<<((4-1-((x)%4))*8) );
;;;223    }
0003f0  e8bd0030          POP      {r4,r5}
0003f4  e12fff1e          BX       lr
;;;224    
                          ENDP

                  BitmapViewCstn12Bit PROC
                  |L1.1016|
;;;410    }
;;;411    void BitmapViewCstn12Bit(UINT8T *pBuffer)
0003f8  e12fff1e          BX       lr
;;;412    {
;;;413        
;;;414    }
;;;415    void BitmapViewTft8Bit_240320(UINT8T *pBuffer)
                          ENDP

                  _PutCstn12Bit PROC
                  |L1.1020|
;;;176    *********************************************************************************************/
;;;177    void _PutCstn12Bit(UINT32T x,UINT32T y,UINT32T c)
0003fc  e92d41f0          PUSH     {r4-r8,lr}
;;;178    {
;;;179        UINT32T z;
;;;180        z=((x)%8);
;;;181        if(x<SCR_XSIZE_CSTN&& y<SCR_YSIZE_CSTN)
000400  e3500d0a          CMP      r0,#0x280
000404  e1a07001          MOV      r7,r1                 ;178
000408  33570e1e          CMPCC    r7,#0x1e0
00040c  e1a04002          MOV      r4,r2                 ;178
000410  e1a05000          MOV      r5,r0                 ;178
000414  e2006007          AND      r6,r0,#7              ;180
000418  2a000015          BCS      |L1.1140|
;;;182        {
;;;183    
;;;184            if((z%3)!=2)
00041c  e3a01003          MOV      r1,#3
000420  e1a00006          MOV      r0,r6
000424  ebfffffe          BL       __aeabi_uidivmod
;;;185                frameBuffer12Bit[(y)][(x)*3/8]=
000428  e59f28a4          LDR      r2,|L1.3284|
00042c  e085c085          ADD      r12,r5,r5,LSL #1
000430  e5922000          LDR      r2,[r2,#0]
000434  e0673207          RSB      r3,r7,r7,LSL #4
000438  e3510002          CMP      r1,#2                 ;184
00043c  e1a0c1ac          LSR      r12,r12,#3
000440  e0823303          ADD      r3,r2,r3,LSL #6
000444  0a00000c          BEQ      |L1.1148|
000448  e59f2888          LDR      r2,|L1.3288|
00044c  e0815081          ADD      r5,r1,r1,LSL #1
000450  e1a00100          LSL      r0,r0,#2
000454  e0800105          ADD      r0,r0,r5,LSL #2
000458  e0044a22          AND      r4,r4,r2,LSR #20
00045c  e1a02032          LSR      r2,r2,r0
000460  e793110c          LDR      r1,[r3,r12,LSL #2]
000464  e2600014          RSB      r0,r0,#0x14
000468  e1c11002          BIC      r1,r1,r2
00046c  e1810014          ORR      r0,r1,r4,LSL r0
000470  e783010c          STR      r0,[r3,r12,LSL #2]
                  |L1.1140|
;;;186                ( frameBuffer12Bit[(y)][(x)*3/8] & ~(0xfff00000>>(((z/3)*4)+((z)%3)*12) )
;;;187    		| ( (c&0xfff)<<(20-(((z/3)*4)+((z)%3)*12))) );
;;;188            else
;;;189            {
;;;190                if(z==2)
;;;191                {
;;;192                    frameBuffer12Bit[(y)][(x)*3/8]=( (frameBuffer12Bit[(y)][(x)*3/8]
;;;193                    								& ~(0xff)) | ((c&0xff0)>>4)  ); 
;;;194                    frameBuffer12Bit[(y)][((x)*3/8)+1]=( (frameBuffer12Bit[(y)][((x)*3/8)+1]
;;;195    		    										& ~(0xf0000000)) | ((c&0xf)<<28)  );
;;;196               }   
;;;197                else if(z==5)
;;;198                {
;;;199                    frameBuffer12Bit[(y)][(x)*3/8]=( (frameBuffer12Bit[(y)][(x)*3/8]
;;;200    	            & ~(0xf)) | ((c&0xf00)>>8)  );
;;;201                    frameBuffer12Bit[(y)][((x)*3/8)+1]=( (frameBuffer12Bit[(y)][((x)*3/8)+1]
;;;202    	            & ~(0xff000000)) | ((c&0xff)<<24)  );
;;;203               }   
;;;204           }
;;;205       }
;;;206    }
000474  e8bd41f0          POP      {r4-r8,lr}
000478  e12fff1e          BX       lr
                  |L1.1148|
00047c  e59f0850          LDR      r0,|L1.3284|
000480  e0851085          ADD      r1,r5,r5,LSL #1       ;185
000484  e5900000          LDR      r0,[r0,#0]            ;185
000488  e0672207          RSB      r2,r7,r7,LSL #4       ;185
00048c  e1a011a1          LSR      r1,r1,#3              ;185
000490  e0800302          ADD      r0,r0,r2,LSL #6       ;185
000494  e3560002          CMP      r6,#2                 ;190
000498  e0800101          ADD      r0,r0,r1,LSL #2       ;185
00049c  0a00000b          BEQ      |L1.1232|
0004a0  e3560005          CMP      r6,#5                 ;197
0004a4  1afffff2          BNE      |L1.1140|
0004a8  e793110c          LDR      r1,[r3,r12,LSL #2]    ;199
0004ac  e1a02a04          LSL      r2,r4,#20             ;199
0004b0  e3c1100f          BIC      r1,r1,#0xf            ;199
0004b4  e1811e22          ORR      r1,r1,r2,LSR #28      ;199
0004b8  e783110c          STR      r1,[r3,r12,LSL #2]    ;199
0004bc  e5901004          LDR      r1,[r0,#4]            ;201
0004c0  e3c114ff          BIC      r1,r1,#0xff000000     ;201
0004c4  e1811c04          ORR      r1,r1,r4,LSL #24      ;201
                  |L1.1224|
0004c8  e5801004          STR      r1,[r0,#4]            ;194
0004cc  eaffffe8          B        |L1.1140|
                  |L1.1232|
0004d0  e793110c          LDR      r1,[r3,r12,LSL #2]    ;192
0004d4  e1a02a04          LSL      r2,r4,#20             ;192
0004d8  e3c110ff          BIC      r1,r1,#0xff           ;192
0004dc  e1811c22          ORR      r1,r1,r2,LSR #24      ;192
0004e0  e783110c          STR      r1,[r3,r12,LSL #2]    ;192
0004e4  e5901004          LDR      r1,[r0,#4]            ;194
0004e8  e3c1120f          BIC      r1,r1,#0xf0000000     ;194
0004ec  e1811e04          ORR      r1,r1,r4,LSL #28      ;194
0004f0  eafffff4          B        |L1.1224|
;;;207    
                          ENDP

                  BitmapViewCstn8Bit PROC
                  |L1.1268|
;;;394    *********************************************************************************************/
;;;395    void BitmapViewCstn8Bit(UINT8T *pBuffer)
0004f4  e92d0070          PUSH     {r4-r6}
;;;396    {
;;;397        UINT32T i, j;
;;;398    	UINT32T *pView = (UINT32T*)frameBuffer8Bit;
0004f8  e59f17dc          LDR      r1,|L1.3292|
;;;399    
;;;400    	for (i = 0; i < SCR_YSIZE_STN; i++)
0004fc  e3a02000          MOV      r2,#0
000500  e5913000          LDR      r3,[r1,#0]            ;398  ; frameBuffer8Bit
                  |L1.1284|
;;;401    	{
;;;402    	    for (j = 0; j < LCD_XSIZE_STN/4; j++)
000504  e3a01000          MOV      r1,#0
                  |L1.1288|
;;;403    	   {
;;;404    		pView[j] = ((*pBuffer) << 24) + ((*(pBuffer+1)) << 16) + ((*(pBuffer+2)) << 8) + (*(pBuffer+3));
000508  e4d06001          LDRB     r6,[r0],#1
00050c  e4d0c001          LDRB     r12,[r0],#1
000510  e4d04002          LDRB     r4,[r0],#2
000514  e5505001          LDRB     r5,[r0,#-1]
000518  e1a06c06          LSL      r6,r6,#24
00051c  e086c80c          ADD      r12,r6,r12,LSL #16
000520  e08cc404          ADD      r12,r12,r4,LSL #8
000524  e08cc005          ADD      r12,r12,r5
000528  e783c101          STR      r12,[r3,r1,LSL #2]
00052c  e2811001          ADD      r1,r1,#1
000530  e3510050          CMP      r1,#0x50              ;402
000534  3afffff3          BCC      |L1.1288|
000538  e2822001          ADD      r2,r2,#1              ;402
00053c  e3520e1e          CMP      r2,#0x1e0             ;400
000540  e2833d0a          ADD      r3,r3,#0x280          ;400
000544  3affffee          BCC      |L1.1284|
;;;405    		pBuffer += 4;
;;;406    	   }
;;;407    	   pView+=SCR_XSIZE_STN/4;
;;;408    	}
;;;409    
;;;410    }
000548  e8bd0070          POP      {r4-r6}
00054c  e12fff1e          BX       lr
;;;411    void BitmapViewCstn12Bit(UINT8T *pBuffer)
                          ENDP

                  _PutCstn8Bit PROC
                  |L1.1360|
;;;159    *********************************************************************************************/
;;;160    void _PutCstn8Bit(UINT32T x,UINT32T y,UINT32T c)
000550  e3500d0a          CMP      r0,#0x280
;;;161    {
000554  e92d0030          PUSH     {r4,r5}
;;;162        if(x<SCR_XSIZE_CSTN&& y<SCR_YSIZE_CSTN)
000558  33510e1e          CMPCC    r1,#0x1e0
00055c  2a00000e          BCS      |L1.1436|
;;;163            frameBuffer8Bit[(y)][(x)/4]=( frameBuffer8Bit[(y)][x/4]
000560  e59f3774          LDR      r3,|L1.3292|
000564  e081c101          ADD      r12,r1,r1,LSL #2
000568  e5935000          LDR      r5,[r3,#0]  ; frameBuffer8Bit
00056c  e3c01003          BIC      r1,r0,#3
000570  e20240ff          AND      r4,r2,#0xff
000574  e085238c          ADD      r2,r5,r12,LSL #7
000578  e2000003          AND      r0,r0,#3
00057c  e1a0c180          LSL      r12,r0,#3
000580  e7925001          LDR      r5,[r2,r1]
000584  e3a034ff          MOV      r3,#0xff000000
000588  e2600003          RSB      r0,r0,#3
00058c  e1c53c33          BIC      r3,r5,r3,LSR r12
000590  e1a00180          LSL      r0,r0,#3
000594  e1830014          ORR      r0,r3,r4,LSL r0
000598  e7820001          STR      r0,[r2,r1]
                  |L1.1436|
;;;164    	    & ~(0xff000000>>((x)%4)*8) ) | ( (c&0x000000ff)<<((4-1-((x)%4))*8) );
;;;165    }
00059c  e8bd0030          POP      {r4,r5}
0005a0  e12fff1e          BX       lr
;;;166    
                          ENDP

                  BitmapViewStn4Bit PROC
                  |L1.1444|
;;;381    }
;;;382    void BitmapViewStn4Bit(UINT8T *pBuffer)
0005a4  e12fff1e          BX       lr
;;;383    {
;;;384    
;;;385    }
;;;386    
                          ENDP

                  _PutStn4Bit PROC
                  |L1.1448|
;;;142    *********************************************************************************************/
;;;143    void _PutStn4Bit(UINT32T x,UINT32T y,UINT32T c)
0005a8  e3500d0a          CMP      r0,#0x280
;;;144    {
0005ac  e92d0030          PUSH     {r4,r5}
;;;145        if(x<SCR_XSIZE_STN&& y<SCR_YSIZE_STN)
0005b0  33510e1e          CMPCC    r1,#0x1e0
0005b4  2a00000e          BCS      |L1.1524|
;;;146            frameBuffer4Bit[(y)][(x)/8]=( frameBuffer4Bit[(y)][x/8]
0005b8  e59f3720          LDR      r3,|L1.3296|
0005bc  e081c101          ADD      r12,r1,r1,LSL #2
0005c0  e5935000          LDR      r5,[r3,#0]  ; frameBuffer4Bit
0005c4  e1a011a0          LSR      r1,r0,#3
0005c8  e202400f          AND      r4,r2,#0xf
0005cc  e085230c          ADD      r2,r5,r12,LSL #6
0005d0  e2000007          AND      r0,r0,#7
0005d4  e1a0c100          LSL      r12,r0,#2
0005d8  e7925101          LDR      r5,[r2,r1,LSL #2]
0005dc  e3a0320f          MOV      r3,#0xf0000000
0005e0  e2600007          RSB      r0,r0,#7
0005e4  e1c53c33          BIC      r3,r5,r3,LSR r12
0005e8  e1a00100          LSL      r0,r0,#2
0005ec  e1830014          ORR      r0,r3,r4,LSL r0
0005f0  e7820101          STR      r0,[r2,r1,LSL #2]
                  |L1.1524|
;;;147    	& ~(0xf0000000>>((x)%8)*4) ) | ( (c&0x0000000f)<<((8-1-((x)%8))*4) );
;;;148    }
0005f4  e8bd0030          POP      {r4,r5}
0005f8  e12fff1e          BX       lr
;;;149    
                          ENDP

                  BitmapViewStn2Bit PROC
                  |L1.1532|
;;;377    }
;;;378    void BitmapViewStn2Bit(UINT8T *pBuffer)
0005fc  e12fff1e          BX       lr
;;;379    {
;;;380        
;;;381    }
;;;382    void BitmapViewStn4Bit(UINT8T *pBuffer)
                          ENDP

                  _PutStn2Bit PROC
                  |L1.1536|
;;;125    *********************************************************************************************/
;;;126    void _PutStn2Bit(UINT32T x,UINT32T y,UINT32T c)
000600  e3500d0a          CMP      r0,#0x280
;;;127    {
000604  e92d0030          PUSH     {r4,r5}
;;;128        if(x<SCR_XSIZE_STN&& y<SCR_YSIZE_STN)
000608  33510e1e          CMPCC    r1,#0x1e0
00060c  2a00000e          BCS      |L1.1612|
;;;129            frameBuffer2Bit[(y)][(x)/16]=( frameBuffer2Bit[(y)][x/16]
000610  e59f36cc          LDR      r3,|L1.3300|
000614  e081c101          ADD      r12,r1,r1,LSL #2
000618  e5935000          LDR      r5,[r3,#0]  ; frameBuffer2Bit
00061c  e1a01220          LSR      r1,r0,#4
000620  e2024003          AND      r4,r2,#3
000624  e085228c          ADD      r2,r5,r12,LSL #5
000628  e200000f          AND      r0,r0,#0xf
00062c  e1a0c080          LSL      r12,r0,#1
000630  e7925101          LDR      r5,[r2,r1,LSL #2]
000634  e3a03103          MOV      r3,#0xc0000000
000638  e260000f          RSB      r0,r0,#0xf
00063c  e1c53c33          BIC      r3,r5,r3,LSR r12
000640  e1a00080          LSL      r0,r0,#1
000644  e1830014          ORR      r0,r3,r4,LSL r0
000648  e7820101          STR      r0,[r2,r1,LSL #2]
                  |L1.1612|
;;;130    	& ~(0xc0000000>>((x)%16)*2) ) | ( (c&0x00000003)<<((16-1-((x)%16))*2) );
;;;131    }
00064c  e8bd0030          POP      {r4,r5}
000650  e12fff1e          BX       lr
;;;132    
                          ENDP

                  BitmapViewStn1Bit PROC
                  |L1.1620|
;;;373    //add by Y.J.GUO April 13,2005
;;;374    void BitmapViewStn1Bit(UINT8T *pBuffer)
000654  e12fff1e          BX       lr
;;;375    {
;;;376         
;;;377    }
;;;378    void BitmapViewStn2Bit(UINT8T *pBuffer)
                          ENDP

                  _PutStn1Bit PROC
                  |L1.1624|
;;;108    *********************************************************************************************/
;;;109    void _PutStn1Bit(UINT32T x,UINT32T y,UINT32T c)
000658  e3500d0a          CMP      r0,#0x280
;;;110    {
00065c  e92d0030          PUSH     {r4,r5}
;;;111        if(x<SCR_XSIZE_STN&& y<SCR_YSIZE_STN)
000660  33510e1e          CMPCC    r1,#0x1e0
000664  2a00000c          BCS      |L1.1692|
;;;112    	frameBuffer1Bit[(y)][(x)/32]=( frameBuffer1Bit[(y)][(x)/32]
000668  e59f3678          LDR      r3,|L1.3304|
00066c  e0814101          ADD      r4,r1,r1,LSL #2
000670  e5933000          LDR      r3,[r3,#0]  ; frameBuffer1Bit
000674  e200101f          AND      r1,r0,#0x1f
000678  e0833204          ADD      r3,r3,r4,LSL #4
00067c  e1a002a0          LSR      r0,r0,#5
000680  e7935100          LDR      r5,[r3,r0,LSL #2]
000684  e3a0c102          MOV      r12,#0x80000000
000688  e261401f          RSB      r4,r1,#0x1f
00068c  e1c5113c          BIC      r1,r5,r12,LSR r1
000690  e2022001          AND      r2,r2,#1
000694  e1811412          ORR      r1,r1,r2,LSL r4
000698  e7831100          STR      r1,[r3,r0,LSL #2]
                  |L1.1692|
;;;113    	& ~(0x80000000>>((x)%32)*1) ) | ( (c&0x00000001)<< ((32-1-((x)%32))*1) );
;;;114    }
00069c  e8bd0030          POP      {r4,r5}
0006a0  e12fff1e          BX       lr
;;;115    
                          ENDP

                  Glib_Init PROC
;;;29     *********************************************************************************************/
;;;30     void Glib_Init(int type)
0006a4  e59f2640          LDR      r2,|L1.3308|
;;;31     {
;;;32         switch(type)
;;;33         {
;;;34     	    case MODE_STN_1BIT:
;;;35     	    	PutPixel=_PutStn1Bit;
0006a8  e59f1640          LDR      r1,|L1.3312|
0006ac  e1500002          CMP      r0,r2                 ;32
0006b0  e0403002          SUB      r3,r0,r2              ;32
;;;36     	    	BitmapView=BitmapViewStn1Bit;
;;;37     	    	break;
;;;38     	    case MODE_STN_2BIT:
;;;39     	       	PutPixel=_PutStn2Bit;
;;;40     	       	BitmapView=BitmapViewStn2Bit;
;;;41     	       	break;
;;;42     	    case MODE_STN_4BIT:
;;;43     	        PutPixel=_PutStn4Bit;
;;;44     	        BitmapView=BitmapViewStn4Bit;
;;;45     	        break;
;;;46     	    case MODE_CSTN_8BIT:
;;;47     	    	PutPixel=_PutCstn8Bit;
;;;48     	    	BitmapView=BitmapViewCstn8Bit;
;;;49     	    	break;   
;;;50     	    case MODE_CSTN_12BIT:
;;;51     	    	PutPixel=_PutCstn12Bit;
;;;52     	    	BitmapView=BitmapViewCstn12Bit;
;;;53     	    	break;   
;;;54     	    case MODE_TFT_8BIT_240320:
;;;55     	    	PutPixel=_PutTft8Bit_240320;
;;;56     	    	BitmapView=BitmapViewTft8Bit_240320;  	
;;;57     	    	break;   
;;;58     	    case MODE_TFT_16BIT_240320:
;;;59     	    	PutPixel=_PutTft16Bit_240320;
;;;60     	    	BitmapView=BitmapViewTft16Bit_240320;  	
;;;61     	    	break;   
;;;62     	    case MODE_TFT_1BIT_640480:
;;;63     	    	PutPixel=_PutTft1Bit_640480;
0006b4  024f0d0f          ADREQ    r0,|L1.764|
0006b8  05810000          STREQ    r0,[r1,#0]  ; PutPixel
;;;64     	    	BitmapView=BitmapViewTft1Bit_640480;
0006bc  024f0ff3          ADREQ    r0,|L1.760|
0006c0  0a000018          BEQ      |L1.1832|
0006c4  ca00002a          BGT      |L1.1908|
0006c8  e59f3624          LDR      r3,|L1.3316|
0006cc  e1500003          CMP      r0,r3                 ;32
0006d0  e0402003          SUB      r2,r0,r3              ;32
0006d4  024f0f63          ADREQ    r0,|L1.1360|
0006d8  05810000          STREQ    r0,[r1,#0]            ;47  ; PutPixel
0006dc  024f0e1f          ADREQ    r0,|L1.1268|
0006e0  0a000010          BEQ      |L1.1832|
0006e4  ca000011          BGT      |L1.1840|
0006e8  e3e02a01          MVN      r2,#0x1000            ;32
0006ec  e0900002          ADDS     r0,r0,r2              ;32
0006f0  024f00a0          ADREQ    r0,|L1.1624|
0006f4  05810000          STREQ    r0,[r1,#0]            ;35  ; PutPixel
0006f8  024f00ac          ADREQ    r0,|L1.1620|
0006fc  0a000009          BEQ      |L1.1832|
000700  e3500001          CMP      r0,#1                 ;32
000704  024f0f43          ADREQ    r0,|L1.1536|
000708  05810000          STREQ    r0,[r1,#0]            ;39  ; PutPixel
00070c  024f0f46          ADREQ    r0,|L1.1532|
000710  0a000004          BEQ      |L1.1832|
000714  e3500003          CMP      r0,#3                 ;32
000718  024f0f5e          ADREQ    r0,|L1.1448|
00071c  05810000          STREQ    r0,[r1,#0]            ;43  ; PutPixel
000720  024f0f61          ADREQ    r0,|L1.1444|
;;;65     	    	break;   
;;;66     	    case MODE_TFT_8BIT_640480:
;;;67     	    	PutPixel=_PutTft8Bit_640480;
;;;68     	    	BitmapView=BitmapViewTft8Bit_640480;
;;;69     	    	break;   
;;;70     	    case MODE_TFT_16BIT_640480:
;;;71     	    	PutPixel=_PutTft16Bit_640480;
;;;72     	    	BitmapView=BitmapViewTft16Bit_640480;
;;;73     	    	break;   
;;;74     		case MODE_TFT_16BIT_800480:
;;;75     	    	PutPixel=_PutTft16Bit_800480;
;;;76     	    	BitmapView=BitmapViewTft16Bit_800480;
;;;77     	    	break;   
;;;78     	    case MODE_TFT_24BIT_640480:
;;;79     	    	PutPixel=_PutTft24Bit_640480;
;;;80     	    	BitmapView=BitmapViewTft24Bit_640480;
;;;81     	    	break;   
;;;82     	    case MODE_TFT_1BIT_800600:
;;;83     	    	PutPixel=_PutTft1Bit_800600;
;;;84     	    	BitmapView=BitmapViewTft1Bit_800600;
;;;85     	    	break;   
;;;86     	    case MODE_TFT_8BIT_800600:
;;;87     	    	PutPixel=_PutTft8Bit_800600;
;;;88     	    	BitmapView=BitmapViewTft8Bit_800600;
;;;89     	    	break;   
;;;90     	    case MODE_TFT_16BIT_800600:
;;;91     	    	PutPixel=_PutTft16Bit_800600;
;;;92     	    	BitmapView=BitmapViewTft16Bit_800600;
;;;93     	    	break;   
;;;94     	    default: 
;;;95     	    	break;
;;;96        }
;;;97     }
000724  112fff1e          BXNE     lr
                  |L1.1832|
000728  e5810004          STR      r0,[r1,#4]            ;92  ; BitmapView
00072c  e12fff1e          BX       lr
                  |L1.1840|
000730  e3520001          CMP      r2,#1                 ;32
000734  024f0d0d          ADREQ    r0,|L1.1020|
000738  05810000          STREQ    r0,[r1,#0]            ;51  ; PutPixel
00073c  024f0fd3          ADREQ    r0,|L1.1016|
000740  0afffff8          BEQ      |L1.1832|
000744  e3e00c21          MVN      r0,#0x2100            ;32
000748  e0900002          ADDS     r0,r0,r2              ;32
00074c  024f0e3b          ADREQ    r0,|L1.932|
000750  05810000          STREQ    r0,[r1,#0]            ;55  ; PutPixel
000754  024f0fef          ADREQ    r0,|L1.928|
000758  0afffff2          BEQ      |L1.1832|
00075c  e3500002          CMP      r0,#2                 ;32
000760  059f0590          LDREQ    r0,|L1.3320|
000764  05810000          STREQ    r0,[r1,#0]            ;59  ; PutPixel
000768  059f058c          LDREQ    r0,|L1.3324|
00076c  0affffed          BEQ      |L1.1832|
000770  e12fff1e          BX       lr
                  |L1.1908|
000774  e3530c02          CMP      r3,#0x200             ;32
000778  059f0580          LDREQ    r0,|L1.3328|
00077c  05810000          STREQ    r0,[r1,#0]            ;83  ; PutPixel
000780  024f0e6d          ADREQ    r0,|L1.184|
000784  0affffe7          BEQ      |L1.1832|
000788  ca00000f          BGT      |L1.1996|
00078c  e3530001          CMP      r3,#1                 ;32
000790  059f056c          LDREQ    r0,|L1.3332|
000794  05810000          STREQ    r0,[r1,#0]            ;67  ; PutPixel
000798  024f0c05          ADREQ    r0,|L1.672|
00079c  0affffe1          BEQ      |L1.1832|
0007a0  e3530003          CMP      r3,#3                 ;32
0007a4  024f0e56          ADREQ    r0,|L1.588|
0007a8  05810000          STREQ    r0,[r1,#0]            ;71  ; PutPixel
0007ac  059f0554          LDREQ    r0,|L1.3336|
0007b0  0affffdc          BEQ      |L1.1832|
0007b4  e3530007          CMP      r3,#7                 ;32
0007b8  059f054c          LDREQ    r0,|L1.3340|
0007bc  05810000          STREQ    r0,[r1,#0]            ;75  ; PutPixel
0007c0  059f0548          LDREQ    r0,|L1.3344|
0007c4  0affffd7          BEQ      |L1.1832|
0007c8  e12fff1e          BX       lr
                  |L1.1996|
0007cc  e3e00c02          MVN      r0,#0x200             ;32
0007d0  e0900003          ADDS     r0,r0,r3              ;32
0007d4  059f0538          LDREQ    r0,|L1.3348|
0007d8  05810000          STREQ    r0,[r1,#0]            ;87  ; PutPixel
0007dc  059f0534          LDREQ    r0,|L1.3352|
0007e0  0affffd0          BEQ      |L1.1832|
0007e4  e3500002          CMP      r0,#2                 ;32
0007e8  059f052c          LDREQ    r0,|L1.3356|
0007ec  05810000          STREQ    r0,[r1,#0]            ;91  ; PutPixel
0007f0  059f0528          LDREQ    r0,|L1.3360|
0007f4  0affffcb          BEQ      |L1.1832|
0007f8  e2800ffb          ADD      r0,r0,#0x3ec          ;32
0007fc  e3500a3e          CMP      r0,#0x3e000           ;32
000800  059f051c          LDREQ    r0,|L1.3364|
000804  05810000          STREQ    r0,[r1,#0]            ;79  ; PutPixel
000808  024f0c07          ADREQ    r0,|L1.272|
00080c  0affffc5          BEQ      |L1.1832|
000810  e12fff1e          BX       lr
;;;98     
                          ENDP

                  Glib_Line PROC
;;;544    *********************************************************************************************/
;;;545    void Glib_Line(int x1,int y1,int x2,int y2,int color)
000814  e92d5ff0          PUSH     {r4-r12,lr}
;;;546    {
000818  e1a05001          MOV      r5,r1
00081c  e1a04000          MOV      r4,r0
;;;547    	int dx,dy,e;
;;;548    	dx=x2-x1; 
;;;549    	dy=y2-y1;
000820  e0431005          SUB      r1,r3,r5
000824  e1a09002          MOV      r9,r2                 ;546
000828  e0527004          SUBS     r7,r2,r4              ;548
;;;550        
;;;551    	if(dx>=0)
;;;552    	{
;;;553    		if(dy >= 0)                                             // dy>=0
;;;554    		{
;;;555    			if(dx>=dy)                                          // 1/8 octant
;;;556    			{
;;;557    				e=dy-dx/2;
;;;558    				while(x1<=x2)
;;;559    				{
;;;560    					PutPixel(x1,y1,color);
00082c  e59f64bc          LDR      r6,|L1.3312|
000830  e59db028          LDR      r11,[sp,#0x28]        ;548
000834  e1a0a003          MOV      r10,r3                ;546
;;;561    					if(e>0){y1+=1;e-=dx;}	
;;;562    					x1+=1;
;;;563    					e+=dy;
;;;564    				}
;;;565    			}
;;;566    			else                                                // 2/8 octant
;;;567    			{
;;;568    				e=dx-dy/2;
;;;569    				while(y1<=y2)
;;;570    				{
;;;571    					PutPixel(x1,y1,color);
;;;572    					if(e>0){x1+=1;e-=dy;}	
;;;573    					y1+=1;
;;;574    					e+=dx;
;;;575    				}
;;;576    			}
;;;577    		}
;;;578    		else                                                    // dy<0
;;;579    		{
;;;580    			dy=-dy;                                             // dy=abs(dy)
000838  e2610000          RSB      r0,r1,#0
00083c  e0438005          SUB      r8,r3,r5              ;549
000840  e0812fa1          ADD      r2,r1,r1,LSR #31      ;568
;;;581    
;;;582    			if(dx>=dy)                                          // 8/8 octant
;;;583    			{
;;;584    				e=dy-dx/2;
;;;585    				while(x1<=x2)
;;;586    				{
;;;587    					PutPixel(x1,y1,color);
;;;588    					if(e>0){y1-=1;e-=dx;}	
;;;589    					x1+=1;
;;;590    					e+=dy;
;;;591    				}
;;;592    			}
;;;593    			else                                                // 7/8 octant
;;;594    			{
;;;595    				e=dx-dy/2;
000844  e0801fa0          ADD      r1,r0,r0,LSR #31
000848  e0493004          SUB      r3,r9,r4              ;548
00084c  4a000046          BMI      |L1.2412|
000850  e3580000          CMP      r8,#0                 ;553
000854  e0833fa3          ADD      r3,r3,r3,LSR #31      ;557
000858  ba000021          BLT      |L1.2276|
00085c  e1580007          CMP      r8,r7                 ;555
000860  d048a0c3          SUBLE    r10,r8,r3,ASR #1      ;557
000864  c04790c2          SUBGT    r9,r7,r2,ASR #1       ;568
000868  da00000b          BLE      |L1.2204|
00086c  ea000019          B        |L1.2264|
                  |L1.2160|
000870  e5963000          LDR      r3,[r6,#0]            ;560  ; PutPixel
000874  e1a0200b          MOV      r2,r11                ;560
000878  e1a01005          MOV      r1,r5                 ;560
00087c  e1a00004          MOV      r0,r4                 ;560
000880  e1a0e00f          MOV      lr,pc                 ;560
000884  e12fff13          BX       r3                    ;560
000888  e35a0000          CMP      r10,#0                ;561
00088c  c04aa007          SUBGT    r10,r10,r7            ;561
000890  c2855001          ADDGT    r5,r5,#1              ;561
000894  e08aa008          ADD      r10,r10,r8            ;563
000898  e2844001          ADD      r4,r4,#1              ;563
                  |L1.2204|
00089c  e1540009          CMP      r4,r9                 ;558
0008a0  dafffff2          BLE      |L1.2160|
                  |L1.2212|
;;;596    				while(y1>=y2)
;;;597    				{
;;;598    					PutPixel(x1,y1,color);
;;;599    					if(e>0){x1+=1;e-=dy;}	
;;;600    					y1-=1;
;;;601    					e+=dx;
;;;602    				}
;;;603    			}
;;;604    		}	
;;;605    	}
;;;606    	else                                                        //dx<0
;;;607    	{
;;;608    		dx=-dx;                                                 //dx=abs(dx)
;;;609    		if(dy >= 0)                                             // dy>=0
;;;610    		{
;;;611    			if(dx>=dy)                                          // 4/8 octant
;;;612    			{
;;;613    				e=dy-dx/2;
;;;614    				while(x1>=x2)
;;;615    				{
;;;616    					PutPixel(x1,y1,color);
;;;617    					if(e>0){y1+=1;e-=dx;}	
;;;618    					x1-=1;
;;;619    					e+=dy;
;;;620    				}
;;;621    			}
;;;622    			else                                                // 3/8 octant
;;;623    			{
;;;624    				e=dx-dy/2;
;;;625    				while(y1<=y2)
;;;626    				{
;;;627    					PutPixel(x1,y1,color);
;;;628    					if(e>0){x1-=1;e-=dy;}	
;;;629    					y1+=1;
;;;630    					e+=dx;
;;;631    				}
;;;632    			}
;;;633    		}
;;;634    		else                                                    // dy<0
;;;635    		{
;;;636    			dy=-dy;                                             // dy=abs(dy)
;;;637    
;;;638    			if(dx>=dy)                                          // 5/8 octant
;;;639    			{
;;;640    				e=dy-dx/2;
;;;641    				while(x1>=x2)
;;;642    				{
;;;643    					PutPixel(x1,y1,color);
;;;644    					if(e>0){y1-=1;e-=dx;}	
;;;645    					x1-=1;
;;;646    					e+=dy;
;;;647    				}
;;;648    			}
;;;649    			else                                                // 6/8 octant
;;;650    			{
;;;651    				e=dx-dy/2;
;;;652    				while(y1>=y2)
;;;653    				{
;;;654    					PutPixel(x1,y1,color);
;;;655    					if(e>0){x1-=1;e-=dy;}	
;;;656    					y1-=1;
;;;657    					e+=dx;
;;;658    				}
;;;659    			}
;;;660    		}	
;;;661    	}
;;;662    }
0008a4  e8bd5ff0          POP      {r4-r12,lr}
0008a8  e12fff1e          BX       lr
                  |L1.2220|
0008ac  e5963000          LDR      r3,[r6,#0]            ;571  ; PutPixel
0008b0  e1a0200b          MOV      r2,r11                ;571
0008b4  e1a01005          MOV      r1,r5                 ;571
0008b8  e1a00004          MOV      r0,r4                 ;571
0008bc  e1a0e00f          MOV      lr,pc                 ;571
0008c0  e12fff13          BX       r3                    ;571
0008c4  e3590000          CMP      r9,#0                 ;572
0008c8  c0499008          SUBGT    r9,r9,r8              ;572
0008cc  c2844001          ADDGT    r4,r4,#1              ;572
0008d0  e0899007          ADD      r9,r9,r7              ;574
0008d4  e2855001          ADD      r5,r5,#1              ;574
                  |L1.2264|
0008d8  e155000a          CMP      r5,r10                ;569
0008dc  dafffff2          BLE      |L1.2220|
0008e0  eaffffef          B        |L1.2212|
                  |L1.2276|
0008e4  e1a08000          MOV      r8,r0                 ;569
0008e8  e1570008          CMP      r7,r8                 ;582
0008ec  a048a0c3          SUBGE    r10,r8,r3,ASR #1      ;584
0008f0  b04790c1          SUBLT    r9,r7,r1,ASR #1       ;595
0008f4  aa00000b          BGE      |L1.2344|
0008f8  ea000018          B        |L1.2400|
                  |L1.2300|
0008fc  e5963000          LDR      r3,[r6,#0]            ;587  ; PutPixel
000900  e1a0200b          MOV      r2,r11                ;587
000904  e1a01005          MOV      r1,r5                 ;587
000908  e1a00004          MOV      r0,r4                 ;587
00090c  e1a0e00f          MOV      lr,pc                 ;587
000910  e12fff13          BX       r3                    ;587
000914  e35a0000          CMP      r10,#0                ;588
000918  c04aa007          SUBGT    r10,r10,r7            ;588
00091c  c2455001          SUBGT    r5,r5,#1              ;588
000920  e08aa008          ADD      r10,r10,r8            ;590
000924  e2844001          ADD      r4,r4,#1              ;590
                  |L1.2344|
000928  e1540009          CMP      r4,r9                 ;585
00092c  dafffff2          BLE      |L1.2300|
000930  eaffffdb          B        |L1.2212|
                  |L1.2356|
000934  e5963000          LDR      r3,[r6,#0]            ;598  ; PutPixel
000938  e1a0200b          MOV      r2,r11                ;598
00093c  e1a01005          MOV      r1,r5                 ;598
000940  e1a00004          MOV      r0,r4                 ;598
000944  e1a0e00f          MOV      lr,pc                 ;598
000948  e12fff13          BX       r3                    ;598
00094c  e3590000          CMP      r9,#0                 ;599
000950  c0499008          SUBGT    r9,r9,r8              ;599
000954  c2844001          ADDGT    r4,r4,#1              ;599
000958  e0899007          ADD      r9,r9,r7              ;601
00095c  e2455001          SUB      r5,r5,#1              ;601
                  |L1.2400|
000960  e155000a          CMP      r5,r10                ;596
000964  aafffff2          BGE      |L1.2356|
000968  eaffffcd          B        |L1.2212|
                  |L1.2412|
00096c  e2633000          RSB      r3,r3,#0              ;608
000970  e3580000          CMP      r8,#0                 ;609
000974  e2677000          RSB      r7,r7,#0              ;608
000978  e0833fa3          ADD      r3,r3,r3,LSR #31      ;613
00097c  ba000020          BLT      |L1.2564|
000980  e1580007          CMP      r8,r7                 ;611
000984  d048a0c3          SUBLE    r10,r8,r3,ASR #1      ;613
000988  c04790c2          SUBGT    r9,r7,r2,ASR #1       ;624
00098c  da00000b          BLE      |L1.2496|
000990  ea000018          B        |L1.2552|
                  |L1.2452|
000994  e5963000          LDR      r3,[r6,#0]            ;616  ; PutPixel
000998  e1a0200b          MOV      r2,r11                ;616
00099c  e1a01005          MOV      r1,r5                 ;616
0009a0  e1a00004          MOV      r0,r4                 ;616
0009a4  e1a0e00f          MOV      lr,pc                 ;616
0009a8  e12fff13          BX       r3                    ;616
0009ac  e35a0000          CMP      r10,#0                ;617
0009b0  c04aa007          SUBGT    r10,r10,r7            ;617
0009b4  c2855001          ADDGT    r5,r5,#1              ;617
0009b8  e08aa008          ADD      r10,r10,r8            ;619
0009bc  e2444001          SUB      r4,r4,#1              ;619
                  |L1.2496|
0009c0  e1540009          CMP      r4,r9                 ;614
0009c4  aafffff2          BGE      |L1.2452|
0009c8  eaffffb5          B        |L1.2212|
                  |L1.2508|
0009cc  e5963000          LDR      r3,[r6,#0]            ;627  ; PutPixel
0009d0  e1a0200b          MOV      r2,r11                ;627
0009d4  e1a01005          MOV      r1,r5                 ;627
0009d8  e1a00004          MOV      r0,r4                 ;627
0009dc  e1a0e00f          MOV      lr,pc                 ;627
0009e0  e12fff13          BX       r3                    ;627
0009e4  e3590000          CMP      r9,#0                 ;628
0009e8  c0499008          SUBGT    r9,r9,r8              ;628
0009ec  c2444001          SUBGT    r4,r4,#1              ;628
0009f0  e0899007          ADD      r9,r9,r7              ;630
0009f4  e2855001          ADD      r5,r5,#1              ;630
                  |L1.2552|
0009f8  e155000a          CMP      r5,r10                ;625
0009fc  dafffff2          BLE      |L1.2508|
000a00  eaffffa7          B        |L1.2212|
                  |L1.2564|
000a04  e1a08000          MOV      r8,r0                 ;636
000a08  e1570008          CMP      r7,r8                 ;638
000a0c  a048a0c3          SUBGE    r10,r8,r3,ASR #1      ;640
000a10  b04790c1          SUBLT    r9,r7,r1,ASR #1       ;651
000a14  aa00000b          BGE      |L1.2632|
000a18  ea000018          B        |L1.2688|
                  |L1.2588|
000a1c  e5963000          LDR      r3,[r6,#0]            ;643  ; PutPixel
000a20  e1a0200b          MOV      r2,r11                ;643
000a24  e1a01005          MOV      r1,r5                 ;643
000a28  e1a00004          MOV      r0,r4                 ;643
000a2c  e1a0e00f          MOV      lr,pc                 ;643
000a30  e12fff13          BX       r3                    ;643
000a34  e35a0000          CMP      r10,#0                ;644
000a38  c04aa007          SUBGT    r10,r10,r7            ;644
000a3c  c2455001          SUBGT    r5,r5,#1              ;644
000a40  e08aa008          ADD      r10,r10,r8            ;646
000a44  e2444001          SUB      r4,r4,#1              ;646
                  |L1.2632|
000a48  e1540009          CMP      r4,r9                 ;641
000a4c  aafffff2          BGE      |L1.2588|
000a50  eaffff93          B        |L1.2212|
                  |L1.2644|
000a54  e5963000          LDR      r3,[r6,#0]            ;654  ; PutPixel
000a58  e1a0200b          MOV      r2,r11                ;654
000a5c  e1a01005          MOV      r1,r5                 ;654
000a60  e1a00004          MOV      r0,r4                 ;654
000a64  e1a0e00f          MOV      lr,pc                 ;654
000a68  e12fff13          BX       r3                    ;654
000a6c  e3590000          CMP      r9,#0                 ;655
000a70  c0499008          SUBGT    r9,r9,r8              ;655
000a74  c2444001          SUBGT    r4,r4,#1              ;655
000a78  e0899007          ADD      r9,r9,r7              ;657
000a7c  e2455001          SUB      r5,r5,#1              ;657
                  |L1.2688|
000a80  e155000a          CMP      r5,r10                ;652
000a84  aafffff2          BGE      |L1.2644|
000a88  eaffff85          B        |L1.2212|
;;;663    
                          ENDP

                  Glib_Rectangle PROC
;;;502    *********************************************************************************************/
;;;503    void Glib_Rectangle(int x1,int y1,int x2,int y2,int color)
000a8c  e92d43f8          PUSH     {r3-r9,lr}
;;;504    {
;;;505        Glib_Line(x1,y1,x2,y1,color);
000a90  e59d4020          LDR      r4,[sp,#0x20]
000a94  e1a06003          MOV      r6,r3                 ;504
000a98  e1a07002          MOV      r7,r2                 ;504
000a9c  e1a08001          MOV      r8,r1                 ;504
000aa0  e1a05000          MOV      r5,r0                 ;504
000aa4  e1a03001          MOV      r3,r1
000aa8  e58d4000          STR      r4,[sp,#0]
000aac  ebfffffe          BL       Glib_Line
;;;506        Glib_Line(x2,y1,x2,y2,color);
000ab0  e1a02007          MOV      r2,r7
000ab4  e1a03006          MOV      r3,r6
000ab8  e1a01008          MOV      r1,r8
000abc  e1a00002          MOV      r0,r2
000ac0  e58d4000          STR      r4,[sp,#0]
000ac4  ebfffffe          BL       Glib_Line
;;;507        Glib_Line(x1,y2,x2,y2,color);
000ac8  e1a03006          MOV      r3,r6
000acc  e1a02007          MOV      r2,r7
000ad0  e1a01003          MOV      r1,r3
000ad4  e1a00005          MOV      r0,r5
000ad8  e58d4000          STR      r4,[sp,#0]
000adc  ebfffffe          BL       Glib_Line
;;;508        Glib_Line(x1,y1,x1,y2,color);
000ae0  e1a02005          MOV      r2,r5
000ae4  e1a03006          MOV      r3,r6
000ae8  e1a01008          MOV      r1,r8
000aec  e1a00002          MOV      r0,r2
000af0  e58d4000          STR      r4,[sp,#0]
000af4  ebfffffe          BL       Glib_Line
;;;509    }
000af8  e8bd43f8          POP      {r3-r9,lr}
000afc  e12fff1e          BX       lr
;;;510    
                          ENDP

                  Glib_FilledRectangle PROC
;;;522    *********************************************************************************************/
;;;523    void Glib_FilledRectangle(int x1,int y1,int x2,int y2,int color)
000b00  e92d43f8          PUSH     {r3-r9,lr}
;;;524    {
;;;525        int i;
;;;526    
;;;527        for(i=y1;i<=y2;i++)
000b04  e59d6020          LDR      r6,[sp,#0x20]
000b08  e1a05003          MOV      r5,r3                 ;524
000b0c  e1a07002          MOV      r7,r2                 ;524
000b10  e1a08000          MOV      r8,r0                 ;524
000b14  e1a04001          MOV      r4,r1
000b18  ea000006          B        |L1.2872|
                  |L1.2844|
;;;528    	Glib_Line(x1,i,x2,i,color);
000b1c  e1a03004          MOV      r3,r4
000b20  e1a02007          MOV      r2,r7
000b24  e1a01003          MOV      r1,r3
000b28  e1a00008          MOV      r0,r8
000b2c  e58d6000          STR      r6,[sp,#0]
000b30  ebfffffe          BL       Glib_Line
000b34  e2844001          ADD      r4,r4,#1
                  |L1.2872|
000b38  e1540005          CMP      r4,r5                 ;527
000b3c  dafffff6          BLE      |L1.2844|
;;;529    }
000b40  e8bd43f8          POP      {r3-r9,lr}
000b44  e12fff1e          BX       lr
;;;530    
                          ENDP

                  Glib_ClearScr PROC
;;;673    *********************************************************************************************/
;;;674    void Glib_ClearScr(UINT32T c, int type)
000b48  e92d41f0          PUSH     {r4-r8,lr}
;;;675    {	
;;;676        int i,j;
;;;677    
;;;678        if((type&0x4000)&&(type&0x400))                                 // type:MODE_TFT_1BIT_800600|MODE_TFT_8BIT_800600|MODE_TFT_16BIT_800600
;;;679            for(j=0;j<SCR_YSIZE_TFT_800600;j++)
;;;680                for(i=0;i<SCR_XSIZE_TFT_800600;i++)
;;;681    		        PutPixel(i,j,c);
000b4c  e59f419c          LDR      r4,|L1.3312|
000b50  e3110901          TST      r1,#0x4000            ;678
000b54  e1a07000          MOV      r7,r0                 ;675
000b58  0a000033          BEQ      |L1.3116|
000b5c  e3110b01          TST      r1,#0x400             ;678
000b60  13a05000          MOVNE    r5,#0                 ;679
000b64  0a00000e          BEQ      |L1.2980|
                  |L1.2920|
000b68  e3a06000          MOV      r6,#0                 ;680
                  |L1.2924|
000b6c  e5943000          LDR      r3,[r4,#0]  ; PutPixel
000b70  e1a02007          MOV      r2,r7
000b74  e1a01005          MOV      r1,r5
000b78  e1a00006          MOV      r0,r6
000b7c  e1a0e00f          MOV      lr,pc
000b80  e12fff13          BX       r3
000b84  e2866001          ADD      r6,r6,#1
000b88  e3560d19          CMP      r6,#0x640             ;680
000b8c  bafffff6          BLT      |L1.2924|
000b90  e2855001          ADD      r5,r5,#1              ;680
000b94  e3550e4b          CMP      r5,#0x4b0             ;679
000b98  bafffff2          BLT      |L1.2920|
                  |L1.2972|
;;;682    
;;;683    
;;;684       // else if((type&0x4000)&&(type&0x200))                            // type:MODE_TFT_1BIT_640480|MODE_TFT_8BIT_640480|MODE_TFT_16BIT_640480
;;;685         //   for(j=0;j<SCR_YSIZE_TFT_640480;j++)
;;;686         //       for(i=0;i<SCR_XSIZE_TFT_640480;i++)
;;;687    	//	        PutPixel(i,j,c);
;;;688    
;;;689    	    else if((type&0x4000)&&(type&0x200))                            // type:MODE_TFT_1BIT_640480|MODE_TFT_8BIT_640480|MODE_TFT_16BIT_640480
;;;690            for(j=0;j<20;j++)
;;;691                for(i=0;i<20;i++)
;;;692    		        PutPixel(i,j,c);
;;;693    
;;;694    
;;;695        else if((type&0x4000)&&(type&0x100))                            // type:MODE_TFT_1BIT_240320|MODE_TFT_8BIT_240320|MODE_TFT_16BIT_240320
;;;696            for(j=0;j<SCR_YSIZE_TFT_240320;j++)
;;;697                for(i=0;i<SCR_XSIZE_TFT_240320;i++)
;;;698    		        PutPixel(i,j,c);
;;;699        else if(type&0x2000)                                            // type:MODE_CSTN_8BIT|MODE_CSTN_12BIT
;;;700            for(j=0;j<SCR_YSIZE_CSTN;j++)
;;;701        	    for(i=0;i<SCR_XSIZE_CSTN;i++)
;;;702    		        PutPixel(i,j,c);
;;;703        else                                                            // type:MODE_CSTN_4BIT|MODE_STN_2BIT|MODE_STN_1BIT
;;;704            for(j=0;j<SCR_YSIZE_STN;j++)
;;;705        	    for(i=0;i<SCR_XSIZE_STN;i++)
;;;706    		        PutPixel(i,j,c);
;;;707    }
000b9c  e8bd41f0          POP      {r4-r8,lr}
000ba0  e12fff1e          BX       lr
                  |L1.2980|
000ba4  e3110c02          TST      r1,#0x200             ;689
000ba8  13a05000          MOVNE    r5,#0                 ;690
000bac  0a00000d          BEQ      |L1.3048|
                  |L1.2992|
000bb0  e3a06000          MOV      r6,#0                 ;691
                  |L1.2996|
000bb4  e5943000          LDR      r3,[r4,#0]            ;692  ; PutPixel
000bb8  e1a02007          MOV      r2,r7                 ;692
000bbc  e1a01005          MOV      r1,r5                 ;692
000bc0  e1a00006          MOV      r0,r6                 ;692
000bc4  e1a0e00f          MOV      lr,pc                 ;692
000bc8  e12fff13          BX       r3                    ;692
000bcc  e2866001          ADD      r6,r6,#1              ;692
000bd0  e3560014          CMP      r6,#0x14              ;691
000bd4  bafffff6          BLT      |L1.2996|
000bd8  e2855001          ADD      r5,r5,#1              ;691
000bdc  e3550014          CMP      r5,#0x14              ;690
000be0  bafffff2          BLT      |L1.2992|
000be4  eaffffec          B        |L1.2972|
                  |L1.3048|
000be8  e3110c01          TST      r1,#0x100             ;695
000bec  13a05000          MOVNE    r5,#0                 ;696
000bf0  0a00000d          BEQ      |L1.3116|
                  |L1.3060|
000bf4  e3a06000          MOV      r6,#0                 ;697
                  |L1.3064|
000bf8  e5943000          LDR      r3,[r4,#0]            ;698  ; PutPixel
000bfc  e1a02007          MOV      r2,r7                 ;698
000c00  e1a01005          MOV      r1,r5                 ;698
000c04  e1a00006          MOV      r0,r6                 ;698
000c08  e1a0e00f          MOV      lr,pc                 ;698
000c0c  e12fff13          BX       r3                    ;698
000c10  e2866001          ADD      r6,r6,#1              ;698
000c14  e3560e1e          CMP      r6,#0x1e0             ;697
000c18  bafffff6          BLT      |L1.3064|
000c1c  e2855001          ADD      r5,r5,#1              ;697
000c20  e3550d0a          CMP      r5,#0x280             ;696
000c24  bafffff2          BLT      |L1.3060|
000c28  eaffffdb          B        |L1.2972|
                  |L1.3116|
000c2c  e3110a02          TST      r1,#0x2000            ;699
000c30  e3a05000          MOV      r5,#0                 ;704
000c34  0a00000d          BEQ      |L1.3184|
                  |L1.3128|
000c38  e3a06000          MOV      r6,#0                 ;701
                  |L1.3132|
000c3c  e5943000          LDR      r3,[r4,#0]            ;702  ; PutPixel
000c40  e1a02007          MOV      r2,r7                 ;702
000c44  e1a01005          MOV      r1,r5                 ;702
000c48  e1a00006          MOV      r0,r6                 ;702
000c4c  e1a0e00f          MOV      lr,pc                 ;702
000c50  e12fff13          BX       r3                    ;702
000c54  e2866001          ADD      r6,r6,#1              ;702
000c58  e3560d0a          CMP      r6,#0x280             ;701
000c5c  bafffff6          BLT      |L1.3132|
000c60  e2855001          ADD      r5,r5,#1              ;701
000c64  e3550e1e          CMP      r5,#0x1e0             ;700
000c68  bafffff2          BLT      |L1.3128|
000c6c  eaffffca          B        |L1.2972|
                  |L1.3184|
000c70  e3a06000          MOV      r6,#0                 ;705
                  |L1.3188|
000c74  e5943000          LDR      r3,[r4,#0]            ;706  ; PutPixel
000c78  e1a02007          MOV      r2,r7                 ;706
000c7c  e1a01005          MOV      r1,r5                 ;706
000c80  e1a00006          MOV      r0,r6                 ;706
000c84  e1a0e00f          MOV      lr,pc                 ;706
000c88  e12fff13          BX       r3                    ;706
000c8c  e2866001          ADD      r6,r6,#1              ;706
000c90  e3560d0a          CMP      r6,#0x280             ;705
000c94  bafffff6          BLT      |L1.3188|
000c98  e2855001          ADD      r5,r5,#1              ;705
000c9c  e3550e1e          CMP      r5,#0x1e0             ;704
000ca0  bafffff2          BLT      |L1.3184|
000ca4  eaffffbc          B        |L1.2972|
                          ENDP

                  |L1.3240|
                          DCD      frameBuffer16BitTft800600
                  |L1.3244|
                          DCD      0xffff0000
                  |L1.3248|
                          DCD      frameBuffer8BitTft800600
                  |L1.3252|
                          DCD      frameBuffer1BitTft800600
                  |L1.3256|
                          DCD      frameBuffer24BitTft640480
                  |L1.3260|
                          DCD      frameBuffer16BitTft800480
                  |L1.3264|
                          DCD      frameBuffer16BitTft640480
                  |L1.3268|
                          DCD      frameBuffer8BitTft640480
                  |L1.3272|
                          DCD      frameBuffer1BitTft640480
                  |L1.3276|
                          DCD      frameBuffer16BitTft240320
                  |L1.3280|
                          DCD      frameBuffer8BitTft240320
                  |L1.3284|
                          DCD      frameBuffer12Bit
                  |L1.3288|
                          DCD      0xfff00000
                  |L1.3292|
                          DCD      frameBuffer8Bit
                  |L1.3296|
                          DCD      frameBuffer4Bit
                  |L1.3300|
                          DCD      frameBuffer2Bit
                  |L1.3304|
                          DCD      frameBuffer1Bit
                  |L1.3308|
                          DCD      0x00004201
                  |L1.3312|
                          DCD      ||.data||
                  |L1.3316|
                          DCD      0x00002001
                  |L1.3320|
                          DCD      _PutTft16Bit_240320
                  |L1.3324|
                          DCD      BitmapViewTft16Bit_240320
                  |L1.3328|
                          DCD      _PutTft1Bit_800600
                  |L1.3332|
                          DCD      _PutTft8Bit_640480
                  |L1.3336|
                          DCD      BitmapViewTft16Bit_640480
                  |L1.3340|
                          DCD      _PutTft16Bit_800480
                  |L1.3344|
                          DCD      BitmapViewTft16Bit_800480
                  |L1.3348|
                          DCD      _PutTft8Bit_800600
                  |L1.3352|
                          DCD      BitmapViewTft8Bit_800600
                  |L1.3356|
                          DCD      _PutTft16Bit_800600
                  |L1.3360|
                          DCD      BitmapViewTft16Bit_800600
                  |L1.3364|
                          DCD      _PutTft24Bit_640480

                          AREA ||.data||, DATA, ALIGN=2

                  PutPixel
                          DCD      0x00000000
                  BitmapView
                          DCD      0x00000000
