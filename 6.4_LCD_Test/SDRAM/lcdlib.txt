; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\sdram\lcdlib.o --asm_dir=.\SDRAM\ --list_dir=.\SDRAM\ --depend=.\sdram\lcdlib.d --cpu=ARM920T --apcs=interwork -O3 --diag_suppress=9931 -I..\Common\Inc -I.\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Samsung -D__UVISION_VERSION=517 --omf_browse=.\sdram\lcdlib.crf Source\lcdlib.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Lcd_Init PROC
;;;47     *********************************************************************************************/
;;;48     void Lcd_Init(int type)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;49     {
;;;50         switch(type)
000004  e59f1a28          LDR      r1,|L1.2612|
;;;51         {
;;;52             case MODE_STN_1BIT:
;;;53            	    frameBuffer1Bit=(UINT32T (*)[SCR_XSIZE_STN/32])LCDFRAMEBUFFER;
000008  e59f3a28          LDR      r3,|L1.2616|
;;;54            	
;;;55            	    //CLKVAL_STN_MONO：(20) MVAL_USED:(0)设置为4位单扫描，1bpp STN显示模式，ENVID=off
;;;56         	    rLCDCON1=(CLKVAL_STN_MONO<<8)|(MVAL_USED<<7)|(1<<5)|(0<<1)|0;
;;;57     
;;;58        	        //设置LINEVAL_STN(垂直尺寸）为LCD_YSIZE_STN(240)-1，其他位在STN LCD显示时都应设置为0
;;;59     	        rLCDCON2=(0<<24)|(LINEVAL_STN<<14)|(0<<6)|(0<<0);	// It is not TFT LCD. So,.....    		
;;;60     	    
;;;61     	        //WDLY_STN：0   HOZVAL_STN：LCD_XSIZE_STN/4-1   LINEBLANK_MONO：(1 &0xff)
;;;62         	    rLCDCON3=(WDLY_STN<<19)|(HOZVAL_STN<<8)|(LINEBLANK_MONO<<0);
;;;63     	    
;;;64         	    //MVAL：13  WLH_STN：0
;;;65         	    rLCDCON4=(MVAL<<8)|(WLH_STN<<0);
;;;66         
;;;67         	    rLCDCON5=0;
;;;68     	    
;;;69     	        rLCDSADDR1=(((UINT32T)frameBuffer1Bit>>22)<<21)|M5D((UINT32T)frameBuffer1Bit>>1);		
;;;70     	        rLCDSADDR2=M5D(((UINT32T)frameBuffer1Bit+(SCR_XSIZE_STN*LCD_YSIZE_STN/8))>>1);
;;;71     	        rLCDSADDR3=(((SCR_XSIZE_STN-LCD_XSIZE_STN)/16)<<11)|(LCD_XSIZE_STN/16);
;;;72           
;;;73                 break;
;;;74     
;;;75             case MODE_STN_2BIT:
;;;76         	    frameBuffer2Bit=(UINT32T (*)[SCR_XSIZE_STN/16])LCDFRAMEBUFFER;
;;;77         	    rLCDCON1=(CLKVAL_STN_GRAY<<8)|(MVAL_USED<<7)|(1<<5)|(1<<1)|0;
;;;78        	        
;;;79        	        // 4-bit single scan,2bpp STN,ENVID=off
;;;80         	    rLCDCON2=(0<<24)|(LINEVAL_STN<<14)|(0<<6)|(0<<0);
;;;81         	    rLCDCON3=(WDLY_STN<<19)|(HOZVAL_STN<<8)|(LINEBLANK_GRAY<<0);
;;;82         	    rLCDCON4=(MVAL<<8)|(WLH_STN<<0);
;;;83         	    rLCDCON5=0;
;;;84     
;;;85         	    rLCDSADDR1=(((UINT32T)frameBuffer2Bit>>22)<<21)|M5D((UINT32T)frameBuffer2Bit>>1);
;;;86         	    rLCDSADDR2=M5D( ((UINT32T)frameBuffer2Bit+(SCR_XSIZE_STN*LCD_YSIZE_STN/4))>>1);
;;;87         	    rLCDSADDR3=(((SCR_XSIZE_STN-LCD_XSIZE_STN)/8)<<11)|(LCD_XSIZE_STN/8);
00000c  e59faa28          LDR      r10,|L1.2620|
;;;88     	        rDITHMODE=0x0;
;;;89     	        rBLUELUT =0xf950;                                   // 4-Gray only
;;;90           
;;;91                 break;
;;;92         	
;;;93             case MODE_STN_4BIT:
;;;94         	    frameBuffer4Bit=(UINT32T (*)[SCR_XSIZE_STN/8])LCDFRAMEBUFFER;
;;;95         	    rLCDCON1=(CLKVAL_STN_GRAY<<8)|(MVAL_USED<<7)|(1<<5)|(2<<1)|0;
;;;96         	    
;;;97         	    // 4-bit single scan,4bpp STN,ENVID=off
;;;98     	        rLCDCON2=(0<<24)|(LINEVAL_STN<<14)|(0<<6)|(0<<0);
;;;99     	        rLCDCON3=(WDLY_STN<<19)|(HOZVAL_STN<<8)|(LINEBLANK_GRAY<<0);
;;;100    	        rLCDCON4=(MVAL<<8)|(WLH_STN<<0);
;;;101    	        rLCDCON5=0;
;;;102     
;;;103    	        rLCDSADDR1=(((UINT32T)frameBuffer4Bit>>22)<<21)|M5D((UINT32T)frameBuffer4Bit>>1);
;;;104    	        rLCDSADDR2=M5D( ((UINT32T)frameBuffer4Bit+(SCR_XSIZE_STN*LCD_YSIZE_STN/2))>>1 );
;;;105    	        rLCDSADDR3=(((SCR_XSIZE_STN-LCD_XSIZE_STN)/4)<<11)|(LCD_XSIZE_STN/4);
;;;106    	        rDITHMODE=0x0;
;;;107           
;;;108                break;
;;;109    
;;;110            case MODE_CSTN_8BIT:
;;;111        	    frameBuffer8Bit=(UINT32T (*)[SCR_XSIZE_CSTN/4])LCDFRAMEBUFFER;
;;;112    	        rLCDCON1=(CLKVAL_CSTN<<8)|(MVAL_USED<<7)|(2<<5)|(3<<1)|0;
;;;113        	    
;;;114        	    // 8-bit single scan,8bpp CSTN,ENVID=off
;;;115    	        rLCDCON2=(0<<24)|(LINEVAL_CSTN<<14)|(0<<6)|(0<<0);
;;;116    	        rLCDCON3=(WDLY_CSTN<<19)|(HOZVAL_CSTN<<8)|(LINEBLANK_CSTN<<0);
;;;117    	        rLCDCON4=(MVAL<<8)|(WLH_CSTN<<0);
;;;118    	        rLCDCON5=0;
;;;119    	       
;;;120                rLCDSADDR1=(((UINT32T)frameBuffer8Bit>>22)<<21 )|M5D((UINT32T)frameBuffer8Bit>>1);
;;;121    	        rLCDSADDR2=M5D( ((UINT32T)frameBuffer8Bit+(SCR_XSIZE_CSTN*LCD_YSIZE_CSTN/1))>>1 );
;;;122    	        rLCDSADDR3=(((SCR_XSIZE_CSTN-LCD_XSIZE_CSTN)/2)<<11)|(LCD_XSIZE_CSTN/2);
;;;123    	        rDITHMODE=0x0;
;;;124    	        rREDLUT  =0xfdb96420;
;;;125    	        rGREENLUT=0xfdb96420;
;;;126    	        rBLUELUT =0xfb40;
;;;127           
;;;128                break;
;;;129    	
;;;130            case MODE_CSTN_12BIT:
;;;131        	    frameBuffer12Bit=(UINT32T (*)[SCR_XSIZE_CSTN*3/8])LCDFRAMEBUFFER;
;;;132        	    rLCDCON1=(CLKVAL_CSTN<<8)|(MVAL_USED<<7)|(2<<5)|(4<<1)|0;
;;;133        	    
;;;134        	    // 8-bit single scan,12bpp CSTN,ENVID=off
;;;135        	    rLCDCON2=(0<<24)|(LINEVAL_CSTN<<14)|(0<<6)|0;
;;;136        	    rLCDCON3=(WDLY_CSTN<<19)|(HOZVAL_CSTN<<8)|(LINEBLANK_CSTN<<0);
;;;137        	    rLCDCON4=(MVAL<<8)|(WLH_CSTN<<0);
;;;138        	    rLCDCON5=0;
;;;139    
;;;140        	    rLCDSADDR1=(((UINT32T)frameBuffer12Bit>>22)<<21)|M5D((UINT32T)frameBuffer12Bit>>1);
;;;141        	    rLCDSADDR2=M5D(((UINT32T)frameBuffer12Bit+((SCR_XSIZE_CSTN*3/2)*LCD_YSIZE_CSTN))>>1);
;;;142        	    rLCDSADDR3=(((SCR_XSIZE_CSTN-LCD_XSIZE_CSTN)*3/4)<<11)|(LCD_XSIZE_CSTN*3/4);
;;;143    	        rDITHMODE=0;
;;;144            
;;;145                break;
;;;146    
;;;147            case MODE_TFT_8BIT_240320:
;;;148            	frameBuffer8BitTft240320=(UINT32T (*)[SCR_XSIZE_TFT_240320/4])LCDFRAMEBUFFER;
;;;149            	rLCDCON1=(CLKVAL_TFT_240320<<8)|(MVAL_USED<<7)|(3<<5)|(11<<1)|0;
;;;150                
;;;151                // TFT LCD panel,8bpp TFT,ENVID=off
;;;152            	rLCDCON2=(VBPD_240320<<24)|(LINEVAL_TFT_240320<<14)|(VFPD_240320<<6)|(VSPW_240320);
;;;153            	rLCDCON3=(HBPD_240320<<19)|(HOZVAL_TFT_240320<<8)|(HFPD_240320);
;;;154            	rLCDCON4=(MVAL<<8)|(HSPW_240320);
;;;155            	rLCDCON5=(1<<11)|(1<<9)|(1<<8);                     //FRM5:6:5,HSYNC and VSYNC are inverted
;;;156            	rLCDSADDR1=(((UINT32T)frameBuffer8BitTft240320>>22)<<21)|M5D((UINT32T)frameBuffer8BitTft240320>>1);
;;;157            	rLCDSADDR2=M5D( ((UINT32T)frameBuffer8BitTft240320+(SCR_XSIZE_TFT_240320*LCD_YSIZE_TFT_240320/1))>>1 );
;;;158            	rLCDSADDR3=(((SCR_XSIZE_TFT_240320-LCD_XSIZE_TFT_240320)/2)<<11)|(LCD_XSIZE_TFT_240320/2);
;;;159            	rLCDINTMSK|=(3);                                    // MASK LCD Sub Interrupt
;;;160            	rLPCSEL&=(~7);                                      // Disable LPC3600
;;;161            	rTPAL=0;                                            // Disable Temp Palette
;;;162               
;;;163                break;
;;;164        		
;;;165            case MODE_TFT_16BIT_240320:
;;;166            	frameBuffer16BitTft240320=(UINT32T (*)[SCR_XSIZE_TFT_240320/2])LCDFRAMEBUFFER;
;;;167            	rLCDCON1=(CLKVAL_TFT_240320<<8)|(MVAL_USED<<7)|(3<<5)|(12<<1)|0;
;;;168                
;;;169                // TFT LCD panel,12bpp TFT,ENVID=off
;;;170            	rLCDCON2=(VBPD_240320<<24)|(LINEVAL_TFT_240320<<14)|(VFPD_240320<<6)|(VSPW_240320);
;;;171            	rLCDCON3=(HBPD_240320<<19)|(HOZVAL_TFT_240320<<8)|(HFPD_240320);
;;;172            	rLCDCON4=(MVAL<<8)|(HSPW_240320);
;;;173            	rLCDCON5=(1<<11)|(1<<9)|(1<<8);                     //FRM5:6:5,HSYNC and VSYNC are inverted
;;;174            	rLCDSADDR1=(((UINT32T)frameBuffer16BitTft240320>>22)<<21)|M5D((UINT32T)frameBuffer16BitTft240320>>1);
;;;175            	rLCDSADDR2=M5D( ((UINT32T)frameBuffer16BitTft240320+(SCR_XSIZE_TFT_240320*LCD_YSIZE_TFT_240320*2))>>1 );
;;;176            	rLCDSADDR3=(((SCR_XSIZE_TFT_240320-LCD_XSIZE_TFT_240320)/1)<<11)|(LCD_XSIZE_TFT_240320/1);
;;;177            	rLCDINTMSK|=(3);                                    // MASK LCD Sub Interrupt
;;;178            	rLPCSEL&=(~7);                                      // Disable LPC3600
;;;179            	rTPAL=0;                                            // Disable Temp Palette
;;;180                
;;;181                break;
;;;182    
;;;183            case MODE_TFT_1BIT_640480:
;;;184            	frameBuffer1BitTft640480=(UINT32T (*)[SCR_XSIZE_TFT_640480/32])LCDFRAMEBUFFER;
;;;185            	rLCDCON1=(CLKVAL_TFT_640480<<8)|(MVAL_USED<<7)|(3<<5)|(8<<1)|0;
;;;186            	rLCDCON2=(VBPD_640480<<24)|(LINEVAL_TFT_640480<<14)|(VFPD_640480<<6)|(VSPW_640480);
000010  e59f6a28          LDR      r6,|L1.2624|
;;;187            	rLCDCON3=(HBPD_640480<<19)|(HOZVAL_TFT_640480<<8)|(HFPD_640480);
000014  e59f7a28          LDR      r7,|L1.2628|
;;;188            	rLCDCON4=(MVAL<<8)|(HSPW_640480);
000018  e59f8a28          LDR      r8,|L1.2632|
00001c  e1500001          CMP      r0,r1                 ;50
000020  e040b001          SUB      r11,r0,r1             ;50
000024  e3a02000          MOV      r2,#0                 ;50
000028  e3a04431          MOV      r4,#0x31000000        ;53
00002c  e3a0144d          MOV      r1,#0x4d000000        ;56
000030  e3a0c562          MOV      r12,#0x18800000       ;69
000034  e3a09c96          MOV      r9,#0x9600            ;86
000038  e3a05c0b          MOV      r5,#0xb00             ;155
00003c  0a0000aa          BEQ      |L1.748|
000040  ca000031          BGT      |L1.268|
000044  e59fea00          LDR      lr,|L1.2636|
000048  e59f8a00          LDR      r8,|L1.2640|
00004c  e150000e          CMP      r0,lr                 ;50
000050  e3a069ef          MOV      r6,#0x3bc000          ;59
000054  e3a07c0d          MOV      r7,#0xd00             ;65
000058  e040b00e          SUB      r11,r0,lr             ;50
00005c  0a000079          BEQ      |L1.584|
000060  ca000013          BGT      |L1.180|
000064  e3e08a01          MVN      r8,#0x1000            ;50
000068  e0988000          ADDS     r8,r8,r0              ;50
00006c  e3a05c4b          MOV      r5,#0x4b00            ;70
000070  0a000057          BEQ      |L1.468|
000074  e59f09d8          LDR      r0,|L1.2644|
000078  e3580001          CMP      r8,#1                 ;50
00007c  0a000063          BEQ      |L1.528|
000080  e3580003          CMP      r8,#3                 ;50
000084  1a00005f          BNE      |L1.520|
000088  e2475fb7          SUB      r5,r7,#0x2dc          ;95
00008c  e5834008          STR      r4,[r3,#8]            ;95  ; frameBuffer4Bit
000090  e5815000          STR      r5,[r1,#0]            ;95
000094  e5816004          STR      r6,[r1,#4]            ;98
000098  e5810008          STR      r0,[r1,#8]            ;99
00009c  e1a0008a          LSL      r0,r10,#1             ;105
0000a0  e581700c          STR      r7,[r1,#0xc]          ;100
0000a4  e5812010          STR      r2,[r1,#0x10]         ;101
0000a8  e581c014          STR      r12,[r1,#0x14]        ;103
0000ac  e5819018          STR      r9,[r1,#0x18]         ;104
0000b0  ea000081          B        |L1.700|
                  |L1.180|
0000b4  e59f099c          LDR      r0,|L1.2648|
0000b8  e35b0001          CMP      r11,#1                ;50
0000bc  0a000074          BEQ      |L1.660|
0000c0  e3e07c21          MVN      r7,#0x2100            ;50
0000c4  e09b9007          ADDS     r9,r11,r7             ;50
0000c8  e59f698c          LDR      r6,|L1.2652|
0000cc  e59f898c          LDR      r8,|L1.2656|
0000d0  e59f798c          LDR      r7,|L1.2660|
0000d4  0a00007b          BEQ      |L1.712|
0000d8  e3590002          CMP      r9,#2                 ;50
0000dc  1a000049          BNE      |L1.520|
0000e0  e59f9980          LDR      r9,|L1.2664|
0000e4  e5834018          STR      r4,[r3,#0x18]         ;167  ; frameBuffer16BitTft240320
0000e8  e5819000          STR      r9,[r1,#0]            ;167
0000ec  e3a03b96          MOV      r3,#0x25800           ;175
0000f0  e5816004          STR      r6,[r1,#4]            ;170
0000f4  e5818008          STR      r8,[r1,#8]            ;171
0000f8  e581700c          STR      r7,[r1,#0xc]          ;172
0000fc  e5815010          STR      r5,[r1,#0x10]         ;173
000100  e581c014          STR      r12,[r1,#0x14]        ;174
000104  e5813018          STR      r3,[r1,#0x18]         ;175
000108  ea0000b1          B        |L1.980|
                  |L1.268|
;;;189            	rLCDCON5=(1<<11)|(1<<9)|(1<<8);                     //FRM5:6:5,HSYNC and VSYNC are inverted
;;;190            	rLCDSADDR1=(((UINT32T)frameBuffer1BitTft640480>>22)<<21)|M5D((UINT32T)frameBuffer1BitTft640480>>1);
;;;191            	rLCDSADDR2=M5D( ((UINT32T)frameBuffer1BitTft640480+(SCR_XSIZE_TFT_640480*LCD_YSIZE_TFT_640480/8))>>1 );
;;;192            	rLCDSADDR3=(((SCR_XSIZE_TFT_640480-LCD_XSIZE_TFT_640480)/16)<<11)|(LCD_XSIZE_TFT_640480/16);
;;;193            	rLCDINTMSK|=(3);                                    // MASK LCD Sub Interrupt
;;;194            	rLPCSEL&=(~7);                                      // Disable LPC3600
;;;195            	rTPAL=0;                                            // Disable Temp Palette
;;;196           
;;;197                break;
;;;198        
;;;199            case MODE_TFT_8BIT_640480:
;;;200            	frameBuffer8BitTft640480=(UINT32T (*)[SCR_XSIZE_TFT_640480/4])LCDFRAMEBUFFER;
;;;201            	rLCDCON1=(CLKVAL_TFT_640480<<8)|(MVAL_USED<<7)|(3<<5)|(11<<1)|0;
;;;202               	
;;;203               	// TFT LCD panel,8bpp TFT,ENVID=off
;;;204            	rLCDCON2=(VBPD_640480<<24)|(LINEVAL_TFT_640480<<14)|(VFPD_640480<<6)|(VSPW_640480);
;;;205            	rLCDCON3=(HBPD_640480<<19)|(HOZVAL_TFT_640480<<8)|(HFPD_640480);
;;;206            	rLCDCON4=(MVAL<<8)|(HSPW_640480);
;;;207            	rLCDCON5=(1<<11)|(1<<9)|(1<<8);                     //FRM5:6:5,HSYNC and VSYNC are inverted
;;;208            	rLCDSADDR1=(((UINT32T)frameBuffer8BitTft640480>>22)<<21)|M5D((UINT32T)frameBuffer8BitTft640480>>1);
;;;209            	rLCDSADDR2=M5D( ((UINT32T)frameBuffer8BitTft640480+(SCR_XSIZE_TFT_640480*LCD_YSIZE_TFT_640480/1))>>1 );
;;;210            	rLCDSADDR3=(((SCR_XSIZE_TFT_640480-LCD_XSIZE_TFT_640480)/2)<<11)|(LCD_XSIZE_TFT_640480/2);
;;;211            	rLCDINTMSK|=(3);                                    // MASK LCD Sub Interrupt
;;;212            	rLPCSEL&=(~7);                                      // Disable LPC3600
;;;213            	rTPAL=0;                                            // Disable Temp Palette
;;;214           
;;;215                break;
;;;216            	
;;;217            case MODE_TFT_16BIT_640480:
;;;218                frameBuffer16BitTft640480=(UINT32T (*)[SCR_XSIZE_TFT_640480/2])LCDFRAMEBUFFER;
;;;219            	rLCDCON1=(CLKVAL_TFT_640480<<8)|(MVAL_USED<<7)|(3<<5)|(12<<1)|0;
;;;220                
;;;221                // TFT LCD panel,16bpp TFT,ENVID=off
;;;222            	rLCDCON2=(VBPD_640480<<24)|(LINEVAL_TFT_640480<<14)|(VFPD_640480<<6)|(VSPW_640480);
;;;223            	rLCDCON3=(HBPD_640480<<19)|(HOZVAL_TFT_640480<<8)|(HFPD_640480);
;;;224            	rLCDCON4=(MVAL<<8)|(HSPW_640480);
;;;225            	rLCDCON5=(1<<11)|(1<<9)|(1<<8);                 	//FRM5:6:5,HSYNC and VSYNC are inverted
;;;226            	rLCDSADDR1=(((UINT32T)frameBuffer16BitTft640480>>22)<<21)|M5D((UINT32T)frameBuffer16BitTft640480>>1);
;;;227            	rLCDSADDR2=M5D( ((UINT32T)frameBuffer16BitTft640480+(SCR_XSIZE_TFT_640480*LCD_YSIZE_TFT_640480*2))>>1 );
;;;228            	rLCDSADDR3=(((SCR_XSIZE_TFT_640480-LCD_XSIZE_TFT_640480)/1)<<11)|(LCD_XSIZE_TFT_640480/1);
;;;229            	rLCDINTMSK|=(3);                                    // MASK LCD Sub Interrupt
;;;230            	rLPCSEL&=(~7);                                      // Disable LPC3600
;;;231            	rTPAL=0;                                            // Disable Temp Palette
;;;232           
;;;233                break;
;;;234            
;;;235            case MODE_TFT_16BIT_800480:
;;;236                frameBuffer16BitTft800480=(UINT32T (*)[SCR_XSIZE_TFT_800480/2])LCDFRAMEBUFFER;
;;;237            	rLCDCON1=(CLKVAL_TFT_800480<<8)|(MVAL_USED<<7)|(3<<5)|(12<<1)|0;
;;;238                
;;;239                // TFT LCD panel,16bpp TFT,ENVID=off
;;;240            	rLCDCON2=(VBPD_800480<<24)|(LINEVAL_TFT_800480<<14)|(VFPD_800480<<6)|(VSPW_800480);
;;;241            	rLCDCON3=(HBPD_800480<<19)|(HOZVAL_TFT_800480<<8)|(HFPD_800480);
;;;242            	rLCDCON4=(MVAL<<8)|(HSPW_800480);
;;;243            	rLCDCON5=(1<<11)|(1<<9)|(1<<8);                 	//FRM5:6:5,HSYNC and VSYNC are inverted
;;;244            	rLCDSADDR1=(((UINT32T)frameBuffer16BitTft800480>>22)<<21)|M5D((UINT32T)frameBuffer16BitTft800480>>1);
;;;245            	rLCDSADDR2=M5D( ((UINT32T)frameBuffer16BitTft800480+(SCR_XSIZE_TFT_800480*LCD_YSIZE_TFT_800480*2))>>1 );
;;;246            	rLCDSADDR3=(((SCR_XSIZE_TFT_800480-LCD_XSIZE_TFT_800480)/1)<<11)|(LCD_XSIZE_TFT_800480/1);
;;;247            	rLCDINTMSK|=(3);                                    // MASK LCD Sub Interrupt
;;;248            	rLPCSEL&=(~7);                                      // Disable LPC3600
;;;249            	rTPAL=0;                                            // Disable Temp Palette
;;;250           
;;;251                break;
;;;252    
;;;253            case MODE_TFT_24BIT_640480:
;;;254                frameBuffer24BitTft640480=(UINT32T (*)[SCR_XSIZE_TFT_640480])LCDFRAMEBUFFER;
;;;255                rLCDCON1=(CLKVAL_TFT_640480<<8)|(MVAL_USED<<7)|(3<<5)|(13<<1)|0;
;;;256                    
;;;257                // TFT LCD panel,24bpp TFT,ENVID=off
;;;258                rLCDCON2=(VBPD_640480<<24)|(LINEVAL_TFT_640480<<14)|(VFPD_640480<<6)|(VSPW_640480);
;;;259                rLCDCON3=(HBPD_640480<<19)|(HOZVAL_TFT_640480<<8)|(HFPD_640480);
;;;260                rLCDCON4=(MVAL<<8)|(HSPW_640480);
;;;261                rLCDCON5=(1<<12)|(1<<9)|(1<<8);                     // BPP24:MSB,HSYNC and VSYNC are inverted
;;;262                rLCDSADDR1=(((UINT32T)frameBuffer24BitTft640480>>22)<<21)|M5D((UINT32T)frameBuffer24BitTft640480>>1);
;;;263                rLCDSADDR2=M5D( ((UINT32T)frameBuffer24BitTft640480+(SCR_XSIZE_TFT_640480*LCD_YSIZE_TFT_640480*4))>>1 );
;;;264                rLCDSADDR3=(((SCR_XSIZE_TFT_640480-LCD_XSIZE_TFT_640480)*2)<<11)|(LCD_XSIZE_TFT_640480*2);
;;;265                rLCDINTMSK|=(3);                                    // MASK LCD Sub Interrupt
;;;266                rLPCSEL&=(~7);                                      // Disable LPC3600
;;;267                rTPAL=0;                                            // Disable Temp Palette
;;;268                
;;;269                break;
;;;270            
;;;271            case MODE_TFT_1BIT_800600:
;;;272            	frameBuffer1BitTft800600=(UINT32T (*)[SCR_XSIZE_TFT_800600/32])LCDFRAMEBUFFER;
;;;273               	rLCDCON1=(CLKVAL_TFT_800600<<8)|(MVAL_USED<<7)|(3<<5)|(8<<1)|0;
;;;274    
;;;275                // TFT LCD panel,1bpp TFT,ENVID=off
;;;276            	rLCDCON2=(VBPD_800600<<24)|(LINEVAL_TFT_800600<<14)|(VFPD_800600<<6)|(VSPW_800600);
00010c  e59f0958          LDR      r0,|L1.2668|
;;;277            	rLCDCON3=(HBPD_800600<<19)|(HOZVAL_TFT_800600<<8)|(HFPD_800600);
000110  e59f9958          LDR      r9,|L1.2672|
;;;278            	rLCDCON4=(MVAL<<8)|(HSPW_800600);
000114  e59fa958          LDR      r10,|L1.2676|
000118  e35b0c02          CMP      r11,#0x200            ;50
00011c  e3a0e078          MOV      lr,#0x78              ;237
000120  0a000090          BEQ      |L1.872|
000124  ca000014          BGT      |L1.380|
000128  e35b0001          CMP      r11,#1                ;50
00012c  e3a00a96          MOV      r0,#0x96000           ;209
000130  0a000078          BEQ      |L1.792|
000134  e35b0003          CMP      r11,#3                ;50
000138  0a000082          BEQ      |L1.840|
00013c  e35b0007          CMP      r11,#7                ;50
000140  1a000030          BNE      |L1.520|
000144  e59f792c          LDR      r7,|L1.2680|
000148  e59f092c          LDR      r0,|L1.2684|
00014c  e5834028          STR      r4,[r3,#0x28]         ;237  ; frameBuffer16BitTft800480
000150  e28a6059          ADD      r6,r10,#0x59          ;242
000154  e581e000          STR      lr,[r1,#0]            ;237
000158  e59f3920          LDR      r3,|L1.2688|
00015c  e5817004          STR      r7,[r1,#4]            ;240
000160  e59f491c          LDR      r4,|L1.2692|
000164  e5810008          STR      r0,[r1,#8]            ;241
000168  e581600c          STR      r6,[r1,#0xc]          ;242
00016c  e5815010          STR      r5,[r1,#0x10]         ;243
000170  e581c014          STR      r12,[r1,#0x14]        ;244
000174  e5813018          STR      r3,[r1,#0x18]         ;245
000178  ea000013          B        |L1.460|
                  |L1.380|
00017c  e3e05c02          MVN      r5,#0x200             ;50
000180  e095500b          ADDS     r5,r5,r11             ;50
000184  0a00007f          BEQ      |L1.904|
000188  e3550002          CMP      r5,#2                 ;50
00018c  0a000085          BEQ      |L1.936|
000190  e2450bf7          SUB      r0,r5,#0x3dc00        ;50
000194  e2500014          SUBS     r0,r0,#0x14           ;50
000198  1a00001a          BNE      |L1.520|
00019c  e59f08e4          LDR      r0,|L1.2696|
0001a0  e583402c          STR      r4,[r3,#0x2c]         ;254  ; frameBuffer24BitTft640480
0001a4  e3a03c13          MOV      r3,#0x1300            ;261
0001a8  e5810000          STR      r0,[r1,#0]            ;255
0001ac  e3a0094b          MOV      r0,#0x12c000          ;263
0001b0  e5816004          STR      r6,[r1,#4]            ;258
0001b4  e59f48d0          LDR      r4,|L1.2700|
0001b8  e5817008          STR      r7,[r1,#8]            ;259
0001bc  e581800c          STR      r8,[r1,#0xc]          ;260
0001c0  e5813010          STR      r3,[r1,#0x10]         ;261
0001c4  e581c014          STR      r12,[r1,#0x14]        ;262
0001c8  e5810018          STR      r0,[r1,#0x18]         ;263
                  |L1.460|
0001cc  e581401c          STR      r4,[r1,#0x1c]         ;246
0001d0  ea000080          B        |L1.984|
                  |L1.468|
0001d4  e59f08b4          LDR      r0,|L1.2704|
0001d8  e59f58b4          LDR      r5,|L1.2708|
0001dc  e5834000          STR      r4,[r3,#0]            ;56  ; frameBuffer1Bit
0001e0  e5810000          STR      r0,[r1,#0]            ;56
0001e4  e3a00d96          MOV      r0,#0x2580            ;70
0001e8  e5816004          STR      r6,[r1,#4]            ;59
0001ec  e59f38a4          LDR      r3,|L1.2712|
0001f0  e5815008          STR      r5,[r1,#8]            ;62
0001f4  e581700c          STR      r7,[r1,#0xc]          ;65
0001f8  e5812010          STR      r2,[r1,#0x10]         ;67
0001fc  e581c014          STR      r12,[r1,#0x14]        ;69
000200  e5810018          STR      r0,[r1,#0x18]         ;70
000204  e581301c          STR      r3,[r1,#0x1c]         ;71
                  |L1.520|
;;;279            	rLCDCON5=(1<<9)|(1<<8);	
;;;280    
;;;281            	rLCDSADDR1=(((UINT32T)frameBuffer1BitTft800600>>22)<<21)|M5D((UINT32T)frameBuffer1BitTft800600>>1);
;;;282            	rLCDSADDR2=M5D( ((UINT32T)frameBuffer1BitTft800600+(SCR_XSIZE_TFT_800600*LCD_YSIZE_TFT_800600/8))>>1 );
;;;283            	rLCDSADDR3=(((SCR_XSIZE_TFT_800600-LCD_XSIZE_TFT_800600)/16)<<11)|(LCD_XSIZE_TFT_800600/16);
;;;284            	rLCDINTMSK|=(3);                                    // MASK LCD Sub Interrupt
;;;285            	rLPCSEL&=(~7);                                      // Disable LPC3600
;;;286            	rTPAL=0;                                            // Disable Temp Palette
;;;287            
;;;288                break;
;;;289        
;;;290            case MODE_TFT_8BIT_800600:
;;;291            	frameBuffer8BitTft800600=(UINT32T (*)[SCR_XSIZE_TFT_800600/4])LCDFRAMEBUFFER;
;;;292               	rLCDCON1=(CLKVAL_TFT_800600<<8)|(MVAL_USED<<7)|(3<<5)|(11<<1)|0;
;;;293                
;;;294                // TFT LCD panel,8bpp TFT,ENVID=off
;;;295            	rLCDCON2=(VBPD_800600<<24)|(LINEVAL_TFT_800600<<14)|(VFPD_800600<<6)|(VSPW_800600);
;;;296            	rLCDCON3=(HBPD_800600<<19)|(HOZVAL_TFT_800600<<8)|(HFPD_800600);
;;;297            	rLCDCON4=(MVAL<<8)|(HSPW_800600);
;;;298            	rLCDCON5=(1<<9)|(1<<8);	
;;;299    
;;;300            	rLCDSADDR1=(((UINT32T)frameBuffer8BitTft800600>>22)<<21)|M5D((UINT32T)frameBuffer8BitTft800600>>1);
;;;301            	rLCDSADDR2=M5D( ((UINT32T)frameBuffer8BitTft800600+(SCR_XSIZE_TFT_800600*LCD_YSIZE_TFT_800600/1))>>1 );
;;;302            	rLCDSADDR3=(((SCR_XSIZE_TFT_800600-LCD_XSIZE_TFT_800600)/2)<<11)|(LCD_XSIZE_TFT_800600/2);
;;;303            	rLCDINTMSK|=(3);                                    // MASK LCD Sub Interrupt
;;;304            	rLPCSEL&=(~7);                                      // Disable LPC3600
;;;305            	rTPAL=0;                                            // Disable Temp Palette
;;;306           
;;;307                break;
;;;308            	
;;;309            case MODE_TFT_16BIT_800600:
;;;310            	frameBuffer16BitTft800600=(UINT32T (*)[SCR_XSIZE_TFT_800600/2])LCDFRAMEBUFFER;
;;;311               	rLCDCON1=(CLKVAL_TFT_800600<<8)|(MVAL_USED<<7)|(3<<5)|(12<<1)|0;
;;;312                
;;;313                // TFT LCD panel,16bpp TFT,ENVID=off
;;;314            	rLCDCON2=(VBPD_800600<<24)|(LINEVAL_TFT_800600<<14)|(VFPD_800600<<6)|(VSPW_800600);
;;;315            	rLCDCON3=(HBPD_800600<<19)|(HOZVAL_TFT_800600<<8)|(HFPD_800600);
;;;316            	rLCDCON4=(MVAL<<8)|(HSPW_800600);
;;;317            	rLCDCON5=(1<<11)|(1<<10)|(1<<9)|(1<<8);
;;;318            	
;;;319            	rLCDSADDR1=(((UINT32T)frameBuffer16BitTft800600>>22)<<21)|M5D((UINT32T)frameBuffer16BitTft800600>>1);
;;;320            	rLCDSADDR2=M5D( ((UINT32T)frameBuffer16BitTft800600+(SCR_XSIZE_TFT_800600*LCD_YSIZE_TFT_800600*2))>>1 );
;;;321            	rLCDSADDR3=(((SCR_XSIZE_TFT_800600-LCD_XSIZE_TFT_800600)/1)<<11)|(LCD_XSIZE_TFT_800600/1);
;;;322            	rLCDINTMSK|=(3);                                    // MASK LCD Sub Interrupt
;;;323            	rLPCSEL&=(~7);                                      // Disable LPC3600
;;;324            	rTPAL=0;                                            // Disable Temp Palette
;;;325            
;;;326                break;
;;;327        
;;;328            default:
;;;329                break;
;;;330       }	
;;;331    }
000208  e8bd4ff0          POP      {r4-r11,lr}
00020c  e12fff1e          BX       lr
                  |L1.528|
000210  e59f8884          LDR      r8,|L1.2716|
000214  e5834004          STR      r4,[r3,#4]            ;77  ; frameBuffer2Bit
000218  e5818000          STR      r8,[r1,#0]            ;77
00021c  e5816004          STR      r6,[r1,#4]            ;80
000220  e5810008          STR      r0,[r1,#8]            ;81
000224  e581700c          STR      r7,[r1,#0xc]          ;82
000228  e59f0870          LDR      r0,|L1.2720|
00022c  e5812010          STR      r2,[r1,#0x10]         ;83
000230  e581c014          STR      r12,[r1,#0x14]        ;85
000234  e5815018          STR      r5,[r1,#0x18]         ;86
000238  e581a01c          STR      r10,[r1,#0x1c]        ;87
00023c  e581204c          STR      r2,[r1,#0x4c]         ;88
000240  e5810028          STR      r0,[r1,#0x28]         ;89
000244  eaffffef          B        |L1.520|
                  |L1.584|
000248  e59f5858          LDR      r5,|L1.2728|
00024c  e59f0850          LDR      r0,|L1.2724|
000250  e583400c          STR      r4,[r3,#0xc]          ;112  ; frameBuffer8Bit
000254  e5815000          STR      r5,[r1,#0]            ;112
000258  e5816004          STR      r6,[r1,#4]            ;115
00025c  e3a03b4b          MOV      r3,#0x12c00           ;121
000260  e5818008          STR      r8,[r1,#8]            ;116
000264  e59f4840          LDR      r4,|L1.2732|
000268  e581700c          STR      r7,[r1,#0xc]          ;117
00026c  e5812010          STR      r2,[r1,#0x10]         ;118
000270  e581c014          STR      r12,[r1,#0x14]        ;120
000274  e243cdc3          SUB      r12,r3,#0x30c0        ;126
000278  e5813018          STR      r3,[r1,#0x18]         ;121
00027c  e581401c          STR      r4,[r1,#0x1c]         ;122
000280  e581204c          STR      r2,[r1,#0x4c]         ;123
000284  e5810020          STR      r0,[r1,#0x20]         ;124
000288  e5810024          STR      r0,[r1,#0x24]         ;125
00028c  e581c028          STR      r12,[r1,#0x28]        ;126
000290  eaffffdc          B        |L1.520|
                  |L1.660|
000294  e59f5814          LDR      r5,|L1.2736|
000298  e5834010          STR      r4,[r3,#0x10]         ;132  ; frameBuffer12Bit
00029c  e5815000          STR      r5,[r1,#0]            ;132
0002a0  e5816004          STR      r6,[r1,#4]            ;135
0002a4  e59f3808          LDR      r3,|L1.2740|
0002a8  e5818008          STR      r8,[r1,#8]            ;136
0002ac  e581700c          STR      r7,[r1,#0xc]          ;137
0002b0  e5812010          STR      r2,[r1,#0x10]         ;138
0002b4  e581c014          STR      r12,[r1,#0x14]        ;140
0002b8  e5813018          STR      r3,[r1,#0x18]         ;141
                  |L1.700|
0002bc  e581001c          STR      r0,[r1,#0x1c]         ;142
0002c0  e581204c          STR      r2,[r1,#0x4c]         ;143
0002c4  eaffffcf          B        |L1.520|
                  |L1.712|
0002c8  e59f07e8          LDR      r0,|L1.2744|
0002cc  e5834014          STR      r4,[r3,#0x14]         ;149  ; frameBuffer8BitTft240320
0002d0  e5810000          STR      r0,[r1,#0]            ;149
0002d4  e3a00b4b          MOV      r0,#0x12c00           ;157
0002d8  e5816004          STR      r6,[r1,#4]            ;152
0002dc  e59f37d8          LDR      r3,|L1.2748|
0002e0  e5818008          STR      r8,[r1,#8]            ;153
0002e4  e581700c          STR      r7,[r1,#0xc]          ;154
0002e8  ea000011          B        |L1.820|
                  |L1.748|
0002ec  e3a00e17          MOV      r0,#0x170             ;185
0002f0  e583401c          STR      r4,[r3,#0x1c]         ;185  ; frameBuffer1BitTft640480
0002f4  e5810000          STR      r0,[r1,#0]            ;185
0002f8  e5816004          STR      r6,[r1,#4]            ;186
0002fc  e5817008          STR      r7,[r1,#8]            ;187
000300  e581800c          STR      r8,[r1,#0xc]          ;188
000304  e5815010          STR      r5,[r1,#0x10]         ;189
000308  e581c014          STR      r12,[r1,#0x14]        ;190
00030c  e5819018          STR      r9,[r1,#0x18]         ;191
000310  e581a01c          STR      r10,[r1,#0x1c]        ;192
000314  ea00002f          B        |L1.984|
                  |L1.792|
000318  e59f07a0          LDR      r0,|L1.2752|
00031c  e5834020          STR      r4,[r3,#0x20]         ;201  ; frameBuffer8BitTft640480
000320  e5810000          STR      r0,[r1,#0]            ;201
000324  e3a00a4b          MOV      r0,#0x4b000           ;209
000328  e5816004          STR      r6,[r1,#4]            ;204
00032c  e59f3790          LDR      r3,|L1.2756|
000330  ea000009          B        |L1.860|
                  |L1.820|
000334  e5815010          STR      r5,[r1,#0x10]         ;155
000338  e581c014          STR      r12,[r1,#0x14]        ;156
00033c  e5810018          STR      r0,[r1,#0x18]         ;157
000340  e581301c          STR      r3,[r1,#0x1c]         ;158
000344  ea000023          B        |L1.984|
                  |L1.840|
000348  e3a09f5e          MOV      r9,#0x178             ;219
00034c  e5834024          STR      r4,[r3,#0x24]         ;219  ; frameBuffer16BitTft640480
000350  e5819000          STR      r9,[r1,#0]            ;219
000354  e5816004          STR      r6,[r1,#4]            ;222
000358  e59f3768          LDR      r3,|L1.2760|
                  |L1.860|
00035c  e5817008          STR      r7,[r1,#8]            ;223
000360  e581800c          STR      r8,[r1,#0xc]          ;224
000364  eafffff2          B        |L1.820|
                  |L1.872|
000368  e5834030          STR      r4,[r3,#0x30]         ;272  ; frameBuffer1BitTft800600
00036c  e3a05070          MOV      r5,#0x70              ;273
000370  e3a03c03          MOV      r3,#0x300             ;279
000374  e5815000          STR      r5,[r1,#0]            ;273
000378  e59f474c          LDR      r4,|L1.2764|
00037c  e5810004          STR      r0,[r1,#4]            ;276
000380  e59f0748          LDR      r0,|L1.2768|
000384  ea00000d          B        |L1.960|
                  |L1.904|
000388  e5834034          STR      r4,[r3,#0x34]         ;291  ; frameBuffer8BitTft800600
00038c  e3a05076          MOV      r5,#0x76              ;292
000390  e3a03c03          MOV      r3,#0x300             ;298
000394  e5815000          STR      r5,[r1,#0]            ;292
000398  e2834a75          ADD      r4,r3,#0x75000        ;301
00039c  e5810004          STR      r0,[r1,#4]            ;295
0003a0  e59f072c          LDR      r0,|L1.2772|
0003a4  ea000005          B        |L1.960|
                  |L1.936|
0003a8  e5834038          STR      r4,[r3,#0x38]         ;310  ; frameBuffer16BitTft800600
0003ac  e3a03c0f          MOV      r3,#0xf00             ;317
0003b0  e581e000          STR      lr,[r1,#0]            ;311
0003b4  e59f471c          LDR      r4,|L1.2776|
0003b8  e5810004          STR      r0,[r1,#4]            ;314
0003bc  e59f06c0          LDR      r0,|L1.2692|
                  |L1.960|
0003c0  e5819008          STR      r9,[r1,#8]            ;315
0003c4  e581a00c          STR      r10,[r1,#0xc]         ;316
0003c8  e5813010          STR      r3,[r1,#0x10]         ;317
0003cc  e581c014          STR      r12,[r1,#0x14]        ;319
0003d0  e5814018          STR      r4,[r1,#0x18]         ;320
                  |L1.980|
0003d4  e581001c          STR      r0,[r1,#0x1c]         ;176
                  |L1.984|
0003d8  e591005c          LDR      r0,[r1,#0x5c]         ;322
0003dc  e3800003          ORR      r0,r0,#3              ;322
0003e0  e581005c          STR      r0,[r1,#0x5c]         ;322
0003e4  e5910060          LDR      r0,[r1,#0x60]         ;323
0003e8  e3c00007          BIC      r0,r0,#7              ;323
0003ec  e5810060          STR      r0,[r1,#0x60]         ;323
0003f0  e5812050          STR      r2,[r1,#0x50]         ;324
0003f4  eaffff83          B        |L1.520|
;;;332    
                          ENDP

                  Lcd_CstnOnOff PROC
;;;340    *********************************************************************************************/
;;;341    void Lcd_CstnOnOff(int onoff)
0003f8  e3a0144d          MOV      r1,#0x4d000000
;;;342    {
;;;343        // 1:CSTN Panel on  0:CSTN Panel off //	
;;;344        if(onoff==1)
;;;345        	rLCDCON1|=1;                                            // ENVID=ON
;;;346        else
;;;347        	rLCDCON1 =rLCDCON1 & 0x3fffe;                           // ENVID Off
0003fc  e5912000          LDR      r2,[r1,#0]
000400  e3500001          CMP      r0,#1                 ;344
000404  03822001          ORREQ    r2,r2,#1              ;345
000408  13c2237f          BICNE    r2,r2,#0xfc000001
00040c  13c227ff          BICNE    r2,r2,#0x3fc0000
000410  e5812000          STR      r2,[r1,#0]
;;;348            rGPBUP=rGPBUP|(1<<5);                                   // Pull-up disable
000414  e3a01456          MOV      r1,#0x56000000
000418  e5912018          LDR      r2,[r1,#0x18]
00041c  e3822020          ORR      r2,r2,#0x20
000420  e5812018          STR      r2,[r1,#0x18]
;;;349            rGPBDAT=rGPBDAT&(~(1<<5))|(onoff<<5);                   // GPB5=On or Off
000424  e5912014          LDR      r2,[r1,#0x14]
000428  e3c22020          BIC      r2,r2,#0x20
00042c  e1820280          ORR      r0,r2,r0,LSL #5
000430  e5810014          STR      r0,[r1,#0x14]
;;;350            rGPBCON=rGPBCON&(~(3<<10))|(1<<10);                     // GPD9=output
000434  e5910010          LDR      r0,[r1,#0x10]
000438  e3c00b03          BIC      r0,r0,#0xc00
00043c  e3800b01          ORR      r0,r0,#0x400
000440  e5810010          STR      r0,[r1,#0x10]
;;;351    }    
000444  e12fff1e          BX       lr
;;;352    
                          ENDP

                  Lcd_EnvidOnOff PROC
;;;361    *********************************************************************************************/
;;;362    void Lcd_EnvidOnOff(int onoff)
000448  e3500001          CMP      r0,#1
;;;363    {
;;;364        if(onoff==1)
;;;365        	rLCDCON1|=0x00000001;                                            // ENVID=ON		
00044c  e3a0044d          MOV      r0,#0x4d000000
;;;366    	else
;;;367        	rLCDCON1 =rLCDCON1 & 0x3fffe;                           // ENVID Off
000450  e5901000          LDR      r1,[r0,#0]
000454  03811001          ORREQ    r1,r1,#1              ;365
000458  13c1137f          BICNE    r1,r1,#0xfc000001
00045c  13c117ff          BICNE    r1,r1,#0x3fc0000
000460  e5801000          STR      r1,[r0,#0]            ;365
;;;368    }    
000464  e12fff1e          BX       lr
;;;369    
                          ENDP

                  Lcd_Lpc3600Enable PROC
;;;378    *********************************************************************************************/
;;;379    void Lcd_Lpc3600Enable(void)
000468  e3a0044d          MOV      r0,#0x4d000000
;;;380    {
;;;381        rLPCSEL&=~(7);
00046c  e5901060          LDR      r1,[r0,#0x60]
000470  e3c11007          BIC      r1,r1,#7
000474  e5801060          STR      r1,[r0,#0x60]
;;;382        rLPCSEL|=(7);                                               // 240320,Enable LPC3600
000478  e5901060          LDR      r1,[r0,#0x60]
00047c  e3811007          ORR      r1,r1,#7
000480  e5801060          STR      r1,[r0,#0x60]
;;;383    }    
000484  e12fff1e          BX       lr
;;;384    
                          ENDP

                  Lcd_PowerEnable PROC
;;;393    *********************************************************************************************/
;;;394    void Lcd_PowerEnable(int invpwren,int pwren)
000488  e3a03456          MOV      r3,#0x56000000
;;;395    {
;;;396        //GPG4 is setted as LCD_PWREN
;;;397        rGPGUP=rGPGUP&(~(1<<4))|(1<<4);                             // Pull-up disable
00048c  e593c068          LDR      r12,[r3,#0x68]
;;;398        rGPGCON=rGPGCON&(~(3<<8))|(3<<8);                           // GPG4=LCD_PWREN
;;;399        
;;;400        //Enable LCD POWER ENABLE Function
;;;401        rLCDCON5=rLCDCON5&(~(1<<3))|(pwren<<3);                     // PWREN
000490  e3a0244d          MOV      r2,#0x4d000000
000494  e38cc010          ORR      r12,r12,#0x10         ;397
000498  e583c068          STR      r12,[r3,#0x68]        ;397
00049c  e593c060          LDR      r12,[r3,#0x60]        ;398
0004a0  e38ccc03          ORR      r12,r12,#0x300        ;398
0004a4  e583c060          STR      r12,[r3,#0x60]        ;398
0004a8  e5923010          LDR      r3,[r2,#0x10]
0004ac  e3c33008          BIC      r3,r3,#8
0004b0  e1831181          ORR      r1,r3,r1,LSL #3
0004b4  e5821010          STR      r1,[r2,#0x10]
;;;402        rLCDCON5=rLCDCON5&(~(1<<5))|(invpwren<<5);                  // INVPWREN
0004b8  e5921010          LDR      r1,[r2,#0x10]
0004bc  e3c11020          BIC      r1,r1,#0x20
0004c0  e1810280          ORR      r0,r1,r0,LSL #5
0004c4  e5820010          STR      r0,[r2,#0x10]
;;;403    }    
0004c8  e12fff1e          BX       lr
;;;404    
                          ENDP

                  Lcd_MoveViewPort PROC
;;;506    
;;;507    void Lcd_MoveViewPort(int vx,int vy,int type)
0004cc  e92d03f0          PUSH     {r4-r9}
;;;508    {
;;;509        UINT32T addr;
;;;510        switch(type)
0004d0  e59f3604          LDR      r3,|L1.2780|
;;;511        {
;;;512            case MODE_STN_1BIT:
;;;513            	// LCDBASEU,LCDBASEL register has to be changed before 12 words before the end of VLINE.
;;;514            	// In mono mode, x=320 is 10 words, So, We can't change LCDBASEU,LCDBASEL 
;;;515            	// during LINECNT=1~0 at mono mode. 
;;;516                // The processor mode should be superviser mode.  
;;;517            //	SET_IF();
;;;518            	#if (LCD_XSIZE_STN<512)
;;;519            	    while((rLCDCON1>>18)<=1);                       // if x<512
;;;520               	#else	
;;;521            	    while((rLCDCON1>>18)==0);                       // if x>512 ((12+4)*32) 
;;;522            	#endif
;;;523            	addr=(UINT32T)frameBuffer1Bit+(vx/8)+vy*(SCR_XSIZE_STN/8);
0004d4  e59fc55c          LDR      r12,|L1.2616|
0004d8  e1520003          CMP      r2,r3                 ;510
0004dc  e0428003          SUB      r8,r2,r3              ;510
0004e0  e1a07fc0          ASR      r7,r0,#31
0004e4  e0806ea7          ADD      r6,r0,r7,LSR #29
0004e8  e0814101          ADD      r4,r1,r1,LSL #2
;;;524            	rLCDSADDR1= ( (addr>>22)<<21 ) | M5D(addr>>1);
;;;525            	rLCDSADDR2= M5D( ((addr+(SCR_XSIZE_STN*LCD_YSIZE_STN/8))>>1) );
;;;526            //	CLR_IF();
;;;527               	break;
;;;528    
;;;529            case MODE_STN_2BIT:
;;;530            //	SET_IF(); 
;;;531            	#if (LCD_XSIZE_STN<256)
;;;532               	    while((rLCDCON1>>18)<=1);                       // if x<256
;;;533            	#else	
;;;534                    while((rLCDCON1>>18)==0);                       // if x>256
;;;535            	#endif
;;;536                addr=(UINT32T)frameBuffer2Bit+(vx/4)+vy*(SCR_XSIZE_STN/4);
;;;537            	rLCDSADDR1= ( (addr>>22)<<21 ) | M5D(addr>>1);
;;;538            	rLCDSADDR2= M5D(((addr+(SCR_XSIZE_STN*LCD_YSIZE_STN/4))>>1));
;;;539            //	CLR_IF();
;;;540                break;
;;;541    
;;;542            case MODE_STN_4BIT:
;;;543            //	SET_IF(); 
;;;544            	#if (LCD_XSIZE_STN<128)
;;;545            	    while((rLCDCON1>>18)<=1);                       // if x<128
;;;546            	#else	
;;;547            	    while((rLCDCON1>>18)==0);                       // if x>128
;;;548            	#endif
;;;549                addr=(UINT32T)frameBuffer4Bit+(vx/2)+vy*(SCR_XSIZE_STN/2);
;;;550            	rLCDSADDR1= ( (addr>>22)<<21 ) | M5D(addr>>1);
;;;551            	rLCDSADDR2= M5D(((addr+(SCR_XSIZE_STN*LCD_YSIZE_STN/2))>>1));
;;;552            //	CLR_IF();
;;;553                break;
;;;554    
;;;555            case MODE_CSTN_8BIT:
;;;556            //	SET_IF(); 
;;;557            	#if (LCD_XSIZE_CSTN<64)
;;;558            	    while((rLCDCON1>>18)<=1);                       // if x<64
;;;559            	#else	
;;;560             	    while((rLCDCON1>>18)==0);                       // if x>64
;;;561            	#endif
;;;562                addr=(UINT32T)frameBuffer8Bit+(vx/1)+vy*(SCR_XSIZE_CSTN/1);
;;;563            	rLCDSADDR1= ( (addr>>22)<<21 ) | M5D(addr>>1);
;;;564            	rLCDSADDR2= M5D(((addr+(SCR_XSIZE_CSTN*LCD_YSIZE_CSTN))>>1));
;;;565            //	CLR_IF();
;;;566                break;
;;;567    
;;;568            case MODE_CSTN_12BIT:
;;;569            //	SET_IF(); 
;;;570            	#if (LCD_XSIZE_CSTN<43)
;;;571            	    while((rLCDCON1>>18)<=1);                       // if x<43
;;;572            	#else	
;;;573            	    while((rLCDCON1>>18)==0);                       // if x>43
;;;574            	#endif
;;;575            	
;;;576            	// Move 6Byte(4pixel)
;;;577            	addr=(UINT32T)frameBuffer12Bit+(vx*3/2)+vy*(SCR_XSIZE_CSTN*3/2); 
0004ec  e0615201          RSB      r5,r1,r1,LSL #4
0004f0  e3a0344d          MOV      r3,#0x4d000000        ;519
0004f4  0a000087          BEQ      |L1.1816|
0004f8  ca00002a          BGT      |L1.1448|
0004fc  e59f9548          LDR      r9,|L1.2636|
000500  e3a01001          MOV      r1,#1                 ;519
000504  e1520009          CMP      r2,r9                 ;510
000508  e0428009          SUB      r8,r2,r9              ;510
00050c  0a000066          BEQ      |L1.1708|
000510  ca000012          BGT      |L1.1376|
000514  e3e05a01          MVN      r5,#0x1000            ;510
000518  e0922005          ADDS     r2,r2,r5              ;510
00051c  0a00004b          BEQ      |L1.1616|
000520  e3520001          CMP      r2,#1                 ;510
000524  0a000054          BEQ      |L1.1660|
000528  e3520003          CMP      r2,#3                 ;510
00052c  1a0000bd          BNE      |L1.2088|
                  |L1.1328|
000530  e5931000          LDR      r1,[r3,#0]            ;547
000534  e1b01921          LSRS     r1,r1,#18             ;547
000538  0afffffc          BEQ      |L1.1328|
00053c  e59c1008          LDR      r1,[r12,#8]           ;549  ; frameBuffer4Bit
000540  e0800fa0          ADD      r0,r0,r0,LSR #31      ;549
000544  e08100c0          ADD      r0,r1,r0,ASR #1       ;549
000548  e0800304          ADD      r0,r0,r4,LSL #6       ;549
                  |L1.1356|
00054c  e1a01b20          LSR      r1,r0,#22             ;550
000550  e1a00500          LSL      r0,r0,#10             ;550
000554  e1a01a81          LSL      r1,r1,#21             ;550
000558  e280264b          ADD      r2,r0,#0x4b00000      ;551
00055c  ea0000ad          B        |L1.2072|
                  |L1.1376|
000560  e3580001          CMP      r8,#1                 ;510
000564  0a000057          BEQ      |L1.1736|
000568  e3580c21          CMP      r8,#0x2100            ;510
00056c  0a000062          BEQ      |L1.1788|
000570  e3e01c21          MVN      r1,#0x2100            ;510
000574  e1780001          CMN      r8,r1                 ;510
000578  1a0000aa          BNE      |L1.2088|
                  |L1.1404|
;;;578            	
;;;579            	rLCDSADDR1= ( (addr>>22)<<21 ) | M5D(addr>>1);
;;;580            	rLCDSADDR2= M5D(((addr+(SCR_XSIZE_CSTN*LCD_YSIZE_CSTN*3/2))>>1));
;;;581            //	CLR_IF();
;;;582                break;
;;;583        	
;;;584            case MODE_TFT_1BIT_240320:
;;;585            //	SET_IF(); 
;;;586            	#if (LCD_XSIZE_TFT_240320<512)
;;;587            	    while((rLCDCON1>>18)<=1);                       // if x<512
;;;588            	#else	
;;;589        	    while((rLCDCON1>>18)==0);                           // if x>512
;;;590            	#endif
;;;591                addr=(UINT32T)frameBuffer8BitTft240320+(vx/8)+vy*(SCR_XSIZE_TFT_240320/8);
;;;592            	rLCDSADDR1= ( (addr>>22)<<21 ) | M5D(addr>>1);
;;;593            	rLCDSADDR2= M5D(((addr+(SCR_XSIZE_TFT_240320*LCD_YSIZE_TFT_240320/8))>>1));
;;;594            //	CLR_IF();
;;;595                break;
;;;596    
;;;597            case MODE_TFT_8BIT_240320:
;;;598            //	SET_IF(); 
;;;599            	#if (LCD_XSIZE_TFT_240320<64)
;;;600            	    while((rLCDCON1>>18)<=1);                       // if x<64
;;;601            	#else	
;;;602            	    while((rLCDCON1>>18)==0);                       // if x>64
00057c  e5931000          LDR      r1,[r3,#0]
000580  e1b01921          LSRS     r1,r1,#18
;;;603            	#endif
;;;604                addr=(UINT32T)frameBuffer8BitTft240320+(vx/1)+vy*(SCR_XSIZE_TFT_240320/1);
000584  159c1014          LDRNE    r1,[r12,#0x14]  ; frameBuffer8BitTft240320
000588  10800001          ADDNE    r0,r0,r1
00058c  10800285          ADDNE    r0,r0,r5,LSL #5
000590  0afffff9          BEQ      |L1.1404|
                  |L1.1428|
000594  e1a01b20          LSR      r1,r0,#22             ;563
000598  e1a00500          LSL      r0,r0,#10             ;563
00059c  e1a01a81          LSL      r1,r1,#21             ;563
0005a0  e2802696          ADD      r2,r0,#0x9600000      ;564
0005a4  ea00009b          B        |L1.2072|
                  |L1.1448|
0005a8  e59f5530          LDR      r5,|L1.2784|
0005ac  e0817181          ADD      r7,r1,r1,LSL #3       ;510
0005b0  e1580005          CMP      r8,r5                 ;510
0005b4  e0482005          SUB      r2,r8,r5              ;510
;;;605            	rLCDSADDR1= ( (addr>>22)<<21 ) | M5D(addr>>1);
;;;606            	rLCDSADDR2= M5D(((addr+(SCR_XSIZE_TFT_240320*LCD_YSIZE_TFT_240320))>>1));
;;;607            //	CLR_IF();
;;;608                break;
;;;609    
;;;610            case MODE_TFT_16BIT_240320:
;;;611            //	SET_IF(); 
;;;612            	#if (LCD_XSIZE_TFT_240320<32)
;;;613            	    while((rLCDCON1>>18)<=1);                       // if x<32
;;;614            	#else	
;;;615            	    while((rLCDCON1>>18)==0);                       // if x>32
;;;616            	#endif
;;;617                addr=(UINT32T)frameBuffer16BitTft240320+(vx*2)+vy*(SCR_XSIZE_TFT_240320*2);
;;;618            	rLCDSADDR1= ( (addr>>22)<<21 ) | M5D(addr>>1);
;;;619            	rLCDSADDR2= M5D(((addr+(SCR_XSIZE_TFT_240320*LCD_YSIZE_TFT_240320*2))>>1));
;;;620            //	CLR_IF();
;;;621                break;
;;;622    
;;;623            case MODE_TFT_1BIT_640480:
;;;624            //	SET_IF();
;;;625            	#if (LCD_XSIZE_TFT_640480<512)
;;;626            	    while((rLCDCON1>>18)<=1);                       // if x<512
;;;627            	#else	
;;;628            	    while((rLCDCON1>>18)==0);                       // if x>512 ((12+4)*32) 
;;;629            	#endif
;;;630                addr=(UINT32T)frameBuffer1BitTft640480+(vx/8)+vy*(SCR_XSIZE_TFT_640480/8);
;;;631            	rLCDSADDR1= ( (addr>>22)<<21 ) | M5D(addr>>1);
;;;632            	rLCDSADDR2= M5D( ((addr+(SCR_XSIZE_TFT_640480*LCD_YSIZE_TFT_640480/8))>>1) );
;;;633            //	CLR_IF();
;;;634                break;
;;;635    
;;;636            case MODE_TFT_8BIT_640480:
;;;637            //	SET_IF(); 
;;;638            	#if (LCD_XSIZE_TFT_640480<64)
;;;639            	    while((rLCDCON1>>18)<=1);                       // if x<64
;;;640            	#else	
;;;641            	    while((rLCDCON1>>18)==0);                       // if x>64
;;;642            	#endif
;;;643                addr=(UINT32T)frameBuffer8BitTft640480+(vx/1)+vy*(SCR_XSIZE_TFT_640480/1);
;;;644            	rLCDSADDR1= ( (addr>>22)<<21 ) | M5D(addr>>1);
;;;645            	rLCDSADDR2= M5D(((addr+(SCR_XSIZE_TFT_640480*LCD_YSIZE_TFT_640480))>>1));
;;;646            //	CLR_IF();
;;;647                break;
;;;648    
;;;649            case MODE_TFT_16BIT_640480:
;;;650            //	SET_IF(); 
;;;651            	#if (LCD_XSIZE_TFT_640480<32)
;;;652            	    while((rLCDCON1>>18)<=1);                       // if x<32
;;;653            	#else	
;;;654            	    while((rLCDCON1>>18)==0);                       // if x>32
;;;655            	#endif
;;;656                addr=(UINT32T)frameBuffer16BitTft640480+(vx*2)+vy*(SCR_XSIZE_TFT_640480*2);
;;;657            	rLCDSADDR1= ( (addr>>22)<<21 ) | M5D(addr>>1);
;;;658            	rLCDSADDR2= M5D(((addr+(SCR_XSIZE_TFT_640480*LCD_YSIZE_TFT_640480*2))>>1));
;;;659            //	CLR_IF();
;;;660                break;
;;;661    
;;;662            case MODE_TFT_24BIT_640480:
;;;663            //	SET_IF(); 
;;;664            	#if (LCD_XSIZE_TFT_640480<16)
;;;665            	    while((rLCDCON1>>18)<=1);                       // if x<16
;;;666            	#else	
;;;667            	    while((rLCDCON1>>18)==0);                       // if x>16
;;;668            	#endif
;;;669                addr=(UINT32T)frameBuffer24BitTft640480+(vx*4)+vy*(SCR_XSIZE_TFT_640480*4);
;;;670            	rLCDSADDR1= ( (addr>>22)<<21 ) | M5D(addr>>1);
;;;671            	rLCDSADDR2= M5D(((addr+(SCR_XSIZE_TFT_640480*LCD_YSIZE_TFT_640480*4))>>1));
;;;672            //	CLR_IF();
;;;673                break;
;;;674    
;;;675            case MODE_TFT_1BIT_800600:
;;;676            //	SET_IF();
;;;677            	#if (LCD_XSIZE_TFT_800600<512)
;;;678                    while((rLCDCON1>>18)<=1);                       // if x<512
;;;679            	#else	
;;;680                    while((rLCDCON1>>18)==0);                       // if x>512 ((12+4)*32) 
;;;681            	#endif
;;;682                addr=(UINT32T)frameBuffer1BitTft800600+(vx/8)+vy*(SCR_XSIZE_TFT_800600/8);
0005b8  e0871201          ADD      r1,r7,r1,LSL #4
0005bc  0a000072          BEQ      |L1.1932|
0005c0  ca000010          BGT      |L1.1544|
0005c4  e35800fd          CMP      r8,#0xfd              ;510
0005c8  0a00005d          BEQ      |L1.1860|
0005cc  e35800fe          CMP      r8,#0xfe              ;510
0005d0  0a000062          BEQ      |L1.1888|
0005d4  e3580c01          CMP      r8,#0x100             ;510
0005d8  1a000092          BNE      |L1.2088|
                  |L1.1500|
0005dc  e5931000          LDR      r1,[r3,#0]            ;654
0005e0  e1b01921          LSRS     r1,r1,#18             ;654
0005e4  0afffffc          BEQ      |L1.1500|
0005e8  e59c1024          LDR      r1,[r12,#0x24]        ;656  ; frameBuffer16BitTft640480
0005ec  e0810080          ADD      r0,r1,r0,LSL #1       ;656
0005f0  e0800484          ADD      r0,r0,r4,LSL #9       ;656
0005f4  e1a01b20          LSR      r1,r0,#22             ;657
0005f8  e1a00500          LSL      r0,r0,#10             ;657
0005fc  e1a01a81          LSL      r1,r1,#21             ;657
000600  e280244b          ADD      r2,r0,#0x4b000000     ;658
000604  ea000083          B        |L1.2072|
                  |L1.1544|
000608  e3520001          CMP      r2,#1                 ;510
00060c  0a00006a          BEQ      |L1.1980|
000610  e3520003          CMP      r2,#3                 ;510
000614  0a000074          BEQ      |L1.2028|
000618  e2421bf7          SUB      r1,r2,#0x3dc00        ;510
00061c  e2511015          SUBS     r1,r1,#0x15           ;510
000620  1a000080          BNE      |L1.2088|
                  |L1.1572|
000624  e5931000          LDR      r1,[r3,#0]            ;667
000628  e1b01921          LSRS     r1,r1,#18             ;667
00062c  0afffffc          BEQ      |L1.1572|
000630  e59c102c          LDR      r1,[r12,#0x2c]        ;669  ; frameBuffer24BitTft640480
000634  e0810100          ADD      r0,r1,r0,LSL #2       ;669
000638  e0800504          ADD      r0,r0,r4,LSL #10      ;669
00063c  e1a01b20          LSR      r1,r0,#22             ;670
000640  e1a00500          LSL      r0,r0,#10             ;670
000644  e1a01a81          LSL      r1,r1,#21             ;670
000648  e2802496          ADD      r2,r0,#0x96000000     ;671
00064c  ea000071          B        |L1.2072|
                  |L1.1616|
000650  e5930000          LDR      r0,[r3,#0]            ;519
000654  e1510920          CMP      r1,r0,LSR #18         ;519
000658  359c0000          LDRCC    r0,[r12,#0]           ;523  ; frameBuffer1Bit
00065c  308001c6          ADDCC    r0,r0,r6,ASR #3       ;523
000660  30800204          ADDCC    r0,r0,r4,LSL #4       ;523
000664  2afffff9          BCS      |L1.1616|
                  |L1.1640|
000668  e1a01b20          LSR      r1,r0,#22             ;524
00066c  e1a00500          LSL      r0,r0,#10             ;524
000670  e1a01a81          LSL      r1,r1,#21             ;524
000674  e280274b          ADD      r2,r0,#0x12c0000      ;525
000678  ea000066          B        |L1.2072|
                  |L1.1660|
00067c  e5931000          LDR      r1,[r3,#0]            ;534
000680  e1b01921          LSRS     r1,r1,#18             ;534
000684  0afffffc          BEQ      |L1.1660|
000688  e59c1004          LDR      r1,[r12,#4]           ;536  ; frameBuffer2Bit
00068c  e0800f27          ADD      r0,r0,r7,LSR #30      ;536
000690  e0810140          ADD      r0,r1,r0,ASR #2       ;536
000694  e0800284          ADD      r0,r0,r4,LSL #5       ;536
000698  e1a01b20          LSR      r1,r0,#22             ;537
00069c  e1a00500          LSL      r0,r0,#10             ;537
0006a0  e1a01a81          LSL      r1,r1,#21             ;537
0006a4  e2802796          ADD      r2,r0,#0x2580000      ;538
0006a8  ea00005a          B        |L1.2072|
                  |L1.1708|
0006ac  e5931000          LDR      r1,[r3,#0]            ;560
0006b0  e1b01921          LSRS     r1,r1,#18             ;560
0006b4  159c100c          LDRNE    r1,[r12,#0xc]         ;562  ; frameBuffer8Bit
0006b8  10800001          ADDNE    r0,r0,r1              ;562
0006bc  10800384          ADDNE    r0,r0,r4,LSL #7       ;562
0006c0  0afffff9          BEQ      |L1.1708|
0006c4  eaffffb2          B        |L1.1428|
                  |L1.1736|
0006c8  e5931000          LDR      r1,[r3,#0]            ;573
0006cc  e1b01921          LSRS     r1,r1,#18             ;573
0006d0  0afffffc          BEQ      |L1.1736|
0006d4  e59c1010          LDR      r1,[r12,#0x10]        ;577  ; frameBuffer12Bit
0006d8  e0800080          ADD      r0,r0,r0,LSL #1       ;577
0006dc  e0800fa0          ADD      r0,r0,r0,LSR #31      ;577
0006e0  e08100c0          ADD      r0,r1,r0,ASR #1       ;577
0006e4  e0800305          ADD      r0,r0,r5,LSL #6       ;577
0006e8  e1a01b20          LSR      r1,r0,#22             ;579
0006ec  e1a00500          LSL      r0,r0,#10             ;579
0006f0  e1a01a81          LSL      r1,r1,#21             ;579
0006f4  e28026e1          ADD      r2,r0,#0xe100000      ;580
0006f8  ea000046          B        |L1.2072|
                  |L1.1788|
0006fc  e5930000          LDR      r0,[r3,#0]            ;587
000700  e1510920          CMP      r1,r0,LSR #18         ;587
000704  359c0014          LDRCC    r0,[r12,#0x14]        ;591  ; frameBuffer8BitTft240320
000708  308001c6          ADDCC    r0,r0,r6,ASR #3       ;591
00070c  30800105          ADDCC    r0,r0,r5,LSL #2       ;591
000710  2afffff9          BCS      |L1.1788|
000714  eaffffd3          B        |L1.1640|
                  |L1.1816|
000718  e5931000          LDR      r1,[r3,#0]            ;615
00071c  e1b01921          LSRS     r1,r1,#18             ;615
000720  0afffffc          BEQ      |L1.1816|
000724  e59c1018          LDR      r1,[r12,#0x18]        ;617  ; frameBuffer16BitTft240320
000728  e0810080          ADD      r0,r1,r0,LSL #1       ;617
00072c  e0800305          ADD      r0,r0,r5,LSL #6       ;617
000730  e1a01b20          LSR      r1,r0,#22             ;618
000734  e1a00500          LSL      r0,r0,#10             ;618
000738  e1a01a81          LSL      r1,r1,#21             ;618
00073c  e280254b          ADD      r2,r0,#0x12c00000     ;619
000740  ea000034          B        |L1.2072|
                  |L1.1860|
000744  e5930000          LDR      r0,[r3,#0]            ;628
000748  e1b00920          LSRS     r0,r0,#18             ;628
00074c  159c001c          LDRNE    r0,[r12,#0x1c]        ;630  ; frameBuffer1BitTft640480
000750  108001c6          ADDNE    r0,r0,r6,ASR #3       ;630
000754  10800284          ADDNE    r0,r0,r4,LSL #5       ;630
000758  0afffff9          BEQ      |L1.1860|
00075c  eaffff7a          B        |L1.1356|
                  |L1.1888|
000760  e5931000          LDR      r1,[r3,#0]            ;641
000764  e1b01921          LSRS     r1,r1,#18             ;641
000768  0afffffc          BEQ      |L1.1888|
00076c  e59c1020          LDR      r1,[r12,#0x20]        ;643  ; frameBuffer8BitTft640480
000770  e0800001          ADD      r0,r0,r1              ;643
000774  e0800404          ADD      r0,r0,r4,LSL #8       ;643
000778  e1a01b20          LSR      r1,r0,#22             ;644
00077c  e1a00500          LSL      r0,r0,#10             ;644
000780  e1a01a81          LSL      r1,r1,#21             ;644
000784  e2802596          ADD      r2,r0,#0x25800000     ;645
000788  ea000022          B        |L1.2072|
                  |L1.1932|
00078c  e5930000          LDR      r0,[r3,#0]            ;680
000790  e1b00920          LSRS     r0,r0,#18             ;680
000794  0afffffc          BEQ      |L1.1932|
000798  e59c0030          LDR      r0,[r12,#0x30]  ; frameBuffer1BitTft800600
00079c  e08001c6          ADD      r0,r0,r6,ASR #3
0007a0  e0800181          ADD      r0,r0,r1,LSL #3
;;;683            	rLCDSADDR1= ( (addr>>22)<<21 ) | M5D(addr>>1);
0007a4  e1a01b20          LSR      r1,r0,#22
0007a8  e1a00500          LSL      r0,r0,#10
;;;684            	rLCDSADDR2= M5D( ((addr+(SCR_XSIZE_TFT_800600*LCD_YSIZE_TFT_800600/8))>>1) );
0007ac  e2802407          ADD      r2,r0,#0x7000000
0007b0  e1a01a81          LSL      r1,r1,#21             ;683
0007b4  e2822853          ADD      r2,r2,#0x530000
;;;685            //	CLR_IF();
;;;686                break;
0007b8  ea000016          B        |L1.2072|
                  |L1.1980|
;;;687    
;;;688            case MODE_TFT_8BIT_800600:
;;;689            //	SET_IF(); 
;;;690        	    #if (LCD_XSIZE_TFT_800600<64)
;;;691            	    while((rLCDCON1>>18)<=1);                       // if x<64
;;;692        	    #else	
;;;693        	        while((rLCDCON1>>18)==0);                       // if x>64
0007bc  e5932000          LDR      r2,[r3,#0]
0007c0  e1b02922          LSRS     r2,r2,#18
0007c4  0afffffc          BEQ      |L1.1980|
;;;694        	    #endif
;;;695                addr=(UINT32T)frameBuffer8BitTft800600+(vx/1)+vy*(SCR_XSIZE_TFT_800600/1);
0007c8  e59c2034          LDR      r2,[r12,#0x34]  ; frameBuffer8BitTft800600
0007cc  e0800002          ADD      r0,r0,r2
0007d0  e0800301          ADD      r0,r0,r1,LSL #6
;;;696            	rLCDSADDR1= ( (addr>>22)<<21 ) | M5D(addr>>1);
0007d4  e1a01b20          LSR      r1,r0,#22
0007d8  e1a00500          LSL      r0,r0,#10
;;;697            	rLCDSADDR2= M5D(((addr+(SCR_XSIZE_TFT_800600*LCD_YSIZE_TFT_800600))>>1));
0007dc  e280230e          ADD      r2,r0,#0x38000000
0007e0  e1a01a81          LSL      r1,r1,#21             ;696
0007e4  e28227a6          ADD      r2,r2,#0x2980000
;;;698            //	CLR_IF();
;;;699                break;
0007e8  ea00000a          B        |L1.2072|
                  |L1.2028|
;;;700    
;;;701            case MODE_TFT_16BIT_800600:
;;;702            //	SET_IF(); 
;;;703        	    #if (LCD_XSIZE_TFT_800600<32)
;;;704            	    while((rLCDCON1>>18)<=1);                       // if x<32
;;;705        	    #else	
;;;706            	    while((rLCDCON1>>18)==0);                       // if x>32
0007ec  e5932000          LDR      r2,[r3,#0]
0007f0  e1b02922          LSRS     r2,r2,#18
0007f4  0afffffc          BEQ      |L1.2028|
;;;707        	    #endif
;;;708                addr=(UINT32T)frameBuffer16BitTft800600+(vx*2)+vy*(SCR_XSIZE_TFT_800600*2);
0007f8  e59c2038          LDR      r2,[r12,#0x38]  ; frameBuffer16BitTft800600
0007fc  e0820080          ADD      r0,r2,r0,LSL #1
000800  e0800381          ADD      r0,r0,r1,LSL #7
;;;709            	rLCDSADDR1= ( (addr>>22)<<21 ) | M5D(addr>>1);
000804  e1a01b20          LSR      r1,r0,#22
000808  e1a00500          LSL      r0,r0,#10
;;;710            	rLCDSADDR2= M5D(((addr+(SCR_XSIZE_TFT_800600*LCD_YSIZE_TFT_800600*2))>>1));
00080c  e2802207          ADD      r2,r0,#0x70000000
000810  e1a01a81          LSL      r1,r1,#21             ;709
000814  e2822653          ADD      r2,r2,#0x5300000
                  |L1.2072|
000818  e18105a0          ORR      r0,r1,r0,LSR #11      ;709
00081c  e1a015a2          LSR      r1,r2,#11
000820  e5830014          STR      r0,[r3,#0x14]         ;709
000824  e5831018          STR      r1,[r3,#0x18]
                  |L1.2088|
;;;711            //	CLR_IF();
;;;712                break;
;;;713    
;;;714            default:
;;;715                break;
;;;716       }   
;;;717    }    
000828  e8bd03f0          POP      {r4-r9}
00082c  e12fff1e          BX       lr
;;;718        
                          ENDP

                  MoveViewPort PROC
;;;412    *********************************************************************************************/
;;;413    void MoveViewPort(int type)
000830  e92d5ff0          PUSH     {r4-r12,lr}
;;;414    {
000834  e1a04000          MOV      r4,r0
;;;415        int vx=0,vy=0,vd;
;;;416        vd=(type==MODE_STN_1BIT)*16+(type==MODE_STN_2BIT)*8+(type==MODE_STN_4BIT)*4
000838  e3e00a01          MVN      r0,#0x1000
00083c  e1e03080          MVN      r3,r0,LSL #1
000840  e2835c21          ADD      r5,r3,#0x2100
000844  e04586c0          SUB      r8,r5,r0,ASR #13
000848  e3a07000          MOV      r7,#0                 ;415
00084c  e088ac20          ADD      r10,r8,r0,LSR #24
000850  e1740000          CMN      r4,r0
000854  e02015c0          EOR      r1,r0,r0,ASR #11
000858  e0202540          EOR      r2,r0,r0,ASR #10
00085c  e043c6c0          SUB      r12,r3,r0,ASR #13
000860  e04595c0          SUB      r9,r5,r0,ASR #11
000864  e045b240          SUB      r11,r5,r0,ASR #4
000868  e04ae5c0          SUB      lr,r10,r0,ASR #11
00086c  e1a00007          MOV      r0,r7
000870  e1a06007          MOV      r6,r7                 ;415
000874  03a00010          MOVEQ    r0,#0x10
000878  0a000029          BEQ      |L1.2340|
00087c  e1540001          CMP      r4,r1
000880  02800008          ADDEQ    r0,r0,#8
000884  0a000002          BEQ      |L1.2196|
000888  e1540002          CMP      r4,r2
00088c  02800004          ADDEQ    r0,r0,#4
000890  0a000002          BEQ      |L1.2208|
                  |L1.2196|
000894  e1540003          CMP      r4,r3
000898  02800002          ADDEQ    r0,r0,#2
00089c  0a000002          BEQ      |L1.2220|
                  |L1.2208|
0008a0  e154000c          CMP      r4,r12
0008a4  02800004          ADDEQ    r0,r0,#4
0008a8  0a000002          BEQ      |L1.2232|
                  |L1.2220|
0008ac  e1540005          CMP      r4,r5
0008b0  02800010          ADDEQ    r0,r0,#0x10
0008b4  0a000002          BEQ      |L1.2244|
                  |L1.2232|
0008b8  e1540008          CMP      r4,r8
0008bc  02800002          ADDEQ    r0,r0,#2
0008c0  0a000002          BEQ      |L1.2256|
                  |L1.2244|
0008c4  e1540009          CMP      r4,r9
0008c8  02800001          ADDEQ    r0,r0,#1
0008cc  0a000002          BEQ      |L1.2268|
                  |L1.2256|
0008d0  e154000a          CMP      r4,r10
0008d4  02800010          ADDEQ    r0,r0,#0x10
0008d8  0a000002          BEQ      |L1.2280|
                  |L1.2268|
0008dc  e154000b          CMP      r4,r11
0008e0  02800002          ADDEQ    r0,r0,#2
0008e4  0a000002          BEQ      |L1.2292|
                  |L1.2280|
0008e8  e154000e          CMP      r4,lr
0008ec  02800001          ADDEQ    r0,r0,#1
0008f0  0a000003          BEQ      |L1.2308|
                  |L1.2292|
0008f4  e3e01b11          MVN      r1,#0x4400
0008f8  e1740001          CMN      r4,r1
0008fc  02800010          ADDEQ    r0,r0,#0x10
000900  0a000003          BEQ      |L1.2324|
                  |L1.2308|
000904  e2441b11          SUB      r1,r4,#0x4400
000908  e2511002          SUBS     r1,r1,#2
00090c  02800002          ADDEQ    r0,r0,#2
000910  0a000003          BEQ      |L1.2340|
                  |L1.2324|
000914  e2441b11          SUB      r1,r4,#0x4400
000918  e2511004          SUBS     r1,r1,#4
00091c  03a01001          MOVEQ    r1,#1
000920  0a000000          BEQ      |L1.2344|
                  |L1.2340|
000924  e3a01000          MOV      r1,#0
                  |L1.2344|
000928  e0805001          ADD      r5,r0,r1
                  |L1.2348|
;;;417            +(type==MODE_CSTN_8BIT)*2+(type==MODE_CSTN_12BIT)*4 
;;;418            +(type==MODE_TFT_1BIT_240320)*16+(type==MODE_TFT_8BIT_240320)*2+(type==MODE_TFT_16BIT_240320)*1
;;;419            +(type==MODE_TFT_1BIT_640480)*16+(type==MODE_TFT_8BIT_640480)*2+(type==MODE_TFT_16BIT_640480)*1+(type==MODE_TFT_24BIT_640480)/2
;;;420            +(type==MODE_TFT_1BIT_800600)*16+(type==MODE_TFT_8BIT_800600)*2+(type==MODE_TFT_16BIT_800600)*1;        
;;;421        while(1)
;;;422        {
;;;423        	switch(uart_getch())
00092c  ebfffffe          BL       uart_getch
000930  e350006a          CMP      r0,#0x6a
000934  0a00000d          BEQ      |L1.2416|
000938  ca000004          BGT      |L1.2384|
00093c  e350000d          CMP      r0,#0xd
000940  0a000039          BEQ      |L1.2604|
000944  e3500069          CMP      r0,#0x69
000948  0a000005          BEQ      |L1.2404|
00094c  ea00002d          B        |L1.2568|
                  |L1.2384|
000950  e350006b          CMP      r0,#0x6b
000954  0a000008          BEQ      |L1.2428|
000958  e350006d          CMP      r0,#0x6d
00095c  0a000015          BEQ      |L1.2488|
000960  ea000028          B        |L1.2568|
                  |L1.2404|
;;;424        	{
;;;425            	case 'i':
;;;426            	    if(vy>=vd)vy-=vd;    	   	
000964  e1560005          CMP      r6,r5
000968  a0466005          SUBGE    r6,r6,r5
00096c  ea000025          B        |L1.2568|
                  |L1.2416|
;;;427                    break;
;;;428            
;;;429            	case 'j':
;;;430            	    if(vx>=vd)vx-=vd;
000970  e1570005          CMP      r7,r5
000974  a0477005          SUBGE    r7,r7,r5
000978  ea000022          B        |L1.2568|
                  |L1.2428|
;;;431                	break;
;;;432    
;;;433        	case 'k':
;;;434        	    //if((type==MODE_TFT_1BIT_800600)|(type==MODE_TFT_8BIT_800600)|(type==MODE_TFT_16BIT_800600))   
;;;435        	    if((type&0x4000)&&(type&0x400))		  
00097c  e3140901          TST      r4,#0x4000
000980  0a000008          BEQ      |L1.2472|
000984  e3140b01          TST      r4,#0x400
;;;436        	    {
;;;437                    if(vx<=(SCR_XSIZE_TFT_800600-LCD_XSIZE_TFT_800600-vd))vx+=vd;   	    
000988  12650e32          RSBNE    r0,r5,#0x320
00098c  1a000006          BNE      |L1.2476|
;;;438        	   }
;;;439        	    //else if((type==MODE_TFT_1BIT_640480)|(type==MODE_TFT_8BIT_640480)|(type==MODE_TFT_16BIT_640480)|(type==MODE_TFT_24BIT_640480))   
;;;440        	    else if((type&0x4000)&&(type&0x200))		  
000990  e3140c02          TST      r4,#0x200
;;;441        	    {
;;;442                    if(vx<=(SCR_XSIZE_TFT_640480-LCD_XSIZE_TFT_640480-vd))vx+=vd;   	    
000994  12650d0a          RSBNE    r0,r5,#0x280
000998  1a000003          BNE      |L1.2476|
;;;443        	   }
;;;444                //else if((type==MODE_TFT_8BIT_240320)|(type==MODE_TFT_16BIT_240320))   
;;;445        	    else if((type&0x4000)&&(type&0x100)) 
00099c  e3140c01          TST      r4,#0x100
;;;446        	    {
;;;447                    if(vx<=(SCR_XSIZE_TFT_240320-LCD_XSIZE_TFT_240320-vd))vx+=vd;   	    
0009a0  126500f0          RSBNE    r0,r5,#0xf0
0009a4  1a000000          BNE      |L1.2476|
                  |L1.2472|
;;;448        	   }
;;;449                //else if((type==MODE_CSTN_8BIT)|(type==MODE_CSTN_12BIT))   
;;;450                else if(type&0x2000)   
;;;451                {
;;;452                    if(vx<=(SCR_XSIZE_CSTN-LCD_XSIZE_CSTN-vd))vx+=vd;   	    
;;;453               }
;;;454                else
;;;455                {
;;;456                    if(vx<=(SCR_XSIZE_STN-LCD_XSIZE_STN-vd))vx+=vd;   	    
0009a8  e2650d05          RSB      r0,r5,#0x140
                  |L1.2476|
0009ac  e1500007          CMP      r0,r7
0009b0  a0877005          ADDGE    r7,r7,r5
0009b4  ea000013          B        |L1.2568|
                  |L1.2488|
;;;457               }
;;;458           	    break;
;;;459    
;;;460        	case 'm':
;;;461        	    if((type&0x4000)&&(type&0x400))
0009b8  e3140901          TST      r4,#0x4000
0009bc  0a00000d          BEQ      |L1.2552|
0009c0  e3140b01          TST      r4,#0x400
0009c4  0a000005          BEQ      |L1.2528|
;;;462                {
;;;463                    if(vy<=(SCR_YSIZE_TFT_800600-LCD_YSIZE_TFT_800600-vd))vy+=vd; 
0009c8  e2650f96          RSB      r0,r5,#0x258
0009cc  e1500006          CMP      r0,r6
0009d0  aa00000b          BGE      |L1.2564|
;;;464                    else if(vy==592) vy+=8;
0009d4  e3560e25          CMP      r6,#0x250
0009d8  03a06f96          MOVEQ    r6,#0x258
0009dc  ea000009          B        |L1.2568|
                  |L1.2528|
;;;465               }
;;;466        	    else if((type&0x4000)&&(type&0x200))
0009e0  e3140c02          TST      r4,#0x200
;;;467                {
;;;468                    if(vy<=(SCR_YSIZE_TFT_640480-LCD_YSIZE_TFT_640480-vd))vy+=vd;   	    
0009e4  12650e1e          RSBNE    r0,r5,#0x1e0
0009e8  1a000003          BNE      |L1.2556|
;;;469               }
;;;470        	    else if((type&0x4000)&&(type&0x100))
0009ec  e3140c01          TST      r4,#0x100
;;;471                {
;;;472                    if(vy<=(SCR_YSIZE_TFT_240320-LCD_YSIZE_TFT_240320-vd))vy+=vd;   	    
0009f0  12650d05          RSBNE    r0,r5,#0x140
0009f4  1a000000          BNE      |L1.2556|
                  |L1.2552|
;;;473               }
;;;474                else if(type&0x2000)   
;;;475                {
;;;476                    if(vy<=(SCR_YSIZE_CSTN-LCD_YSIZE_CSTN-vd))vy+=vd;   	    
;;;477               }
;;;478                else
;;;479                {
;;;480                    if(vy<=(SCR_YSIZE_STN-LCD_YSIZE_STN-vd))vy+=vd;   	    
0009f8  e26500f0          RSB      r0,r5,#0xf0
                  |L1.2556|
0009fc  e1500006          CMP      r0,r6
000a00  ba000000          BLT      |L1.2568|
                  |L1.2564|
000a04  e0866005          ADD      r6,r6,r5
                  |L1.2568|
;;;481               }
;;;482                
;;;483           	    break;
;;;484    
;;;485        	case '\r':
;;;486           	    return;
;;;487    
;;;488        	default:
;;;489        	    break;
;;;490    		}
;;;491        	uart_printf("vx=%3d,vy=%3d\n",vx,vy);
000a08  e1a02006          MOV      r2,r6
000a0c  e1a01007          MOV      r1,r7
000a10  e28f00cc          ADR      r0,|L1.2788|
000a14  ebfffffe          BL       uart_printf
;;;492        	Lcd_MoveViewPort(vx,vy,type);
000a18  e1a02004          MOV      r2,r4
000a1c  e1a01006          MOV      r1,r6
000a20  e1a00007          MOV      r0,r7
000a24  ebfffffe          BL       Lcd_MoveViewPort
000a28  eaffffbf          B        |L1.2348|
                  |L1.2604|
;;;493       }
;;;494    }
000a2c  e8bd5ff0          POP      {r4-r12,lr}
000a30  e12fff1e          BX       lr
;;;495    
                          ENDP

                  |L1.2612|
                          DCD      0x00004201
                  |L1.2616|
                          DCD      ||.data||
                  |L1.2620|
                          DCD      0x00014028
                  |L1.2624|
                          DCD      0x2077c241
                  |L1.2628|
                          DCD      0x017a7f0f
                  |L1.2632|
                          DCD      0x00000d5f
                  |L1.2636|
                          DCD      0x00002001
                  |L1.2640|
                          DCD      0x00007710
                  |L1.2644|
                          DCD      0x00004f0d
                  |L1.2648|
                          DCD      0x000780f0
                  |L1.2652|
                          DCD      0x014fc081
                  |L1.2656|
                          DCD      0x0030ef02
                  |L1.2660|
                          DCD      0x00000d03
                  |L1.2664|
                          DCD      0x00000478
                  |L1.2668|
                          DCD      0x0195c080
                  |L1.2672|
                          DCD      0x00eb1f1d
                  |L1.2676|
                          DCD      0x00000d0b
                  |L1.2680|
                          DCD      0x0f77c3de
                  |L1.2684|
                          DCD      0x00f31f46
                  |L1.2688|
                          DCD      0x000bb800
                  |L1.2692|
                          DCD      0x00190320
                  |L1.2696|
                          DCD      0x0000017a
                  |L1.2700|
                          DCD      0x00280500
                  |L1.2704|
                          DCD      0x00001420
                  |L1.2708|
                          DCD      0x00004f01
                  |L1.2712|
                          DCD      0x0000a014
                  |L1.2716|
                          DCD      0x00000a22
                  |L1.2720|
                          DCD      0x0000f950
                  |L1.2724|
                          DCD      0xfdb96420
                  |L1.2728|
                          DCD      0x00000646
                  |L1.2732|
                          DCD      0x000500a0
                  |L1.2736|
                          DCD      0x00000648
                  |L1.2740|
                          DCD      0x0001c200
                  |L1.2744|
                          DCD      0x00000476
                  |L1.2748|
                          DCD      0x0003c078
                  |L1.2752|
                          DCD      0x00000176
                  |L1.2756|
                          DCD      0x000a0140
                  |L1.2760|
                          DCD      0x00140280
                  |L1.2764|
                          DCD      0x0000ea60
                  |L1.2768|
                          DCD      0x00019032
                  |L1.2772|
                          DCD      0x000c8190
                  |L1.2776|
                          DCD      0x000ea600
                  |L1.2780|
                          DCD      0x00004104
                  |L1.2784|
                          DCD      0x000002fd
                  |L1.2788|
000ae4  76783d25          DCB      "vx=%3d,vy=%3d\n",0
000ae8  33642c76
000aec  793d2533
000af0  640a00  
000af3  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  frameBuffer1Bit
                          DCD      0x00000000
                  frameBuffer2Bit
                          DCD      0x00000000
                  frameBuffer4Bit
                          DCD      0x00000000
                  frameBuffer8Bit
                          DCD      0x00000000
                  frameBuffer12Bit
                          DCD      0x00000000
                  frameBuffer8BitTft240320
                          DCD      0x00000000
                  frameBuffer16BitTft240320
                          DCD      0x00000000
                  frameBuffer1BitTft640480
                          DCD      0x00000000
                  frameBuffer8BitTft640480
                          DCD      0x00000000
                  frameBuffer16BitTft640480
                          DCD      0x00000000
                  frameBuffer16BitTft800480
                          DCD      0x00000000
                  frameBuffer24BitTft640480
                          DCD      0x00000000
                  frameBuffer1BitTft800600
                          DCD      0x00000000
                  frameBuffer8BitTft800600
                          DCD      0x00000000
                  frameBuffer16BitTft800600
                          DCD      0x00000000
