; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\sdram\dotled.o --asm_dir=.\SDRAM\ --list_dir=.\SDRAM\ --depend=.\sdram\dotled.d --cpu=ARM920T --apcs=interwork -O3 --diag_suppress=9931 -I..\Common\Inc -I.\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Samsung -D__UVISION_VERSION=517 --omf_browse=.\sdram\dotled.crf Source\Dotled.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  write_L4094 PROC
;;;51     *********************************************************************************************/
;;;52     void write_L4094(UINT16T data)
000000  e92d0030          PUSH     {r4,r5}
;;;53     {
;;;54     	UINT8T i;     
;;;55     	Lstr_H;  
000004  e3a01456          MOV      r1,#0x56000000
;;;56     	for(i=0;i<16;i++)
;;;57     	{
;;;58     		CLK_L;
000008  e59f31b4          LDR      r3,|L1.452|
00000c  e5914014          LDR      r4,[r1,#0x14]         ;55
;;;59             if(data & 0x01==1)
;;;60     			Ldata_H;
;;;61             else
;;;62              	Ldata_L;
000010  e59fc1b0          LDR      r12,|L1.456|
000014  e3844010          ORR      r4,r4,#0x10           ;55
000018  e3a02000          MOV      r2,#0                 ;56
00001c  e5814014          STR      r4,[r1,#0x14]         ;55
                  |L1.32|
000020  e5915034          LDR      r5,[r1,#0x34]         ;58
000024  e3100001          TST      r0,#1                 ;59
000028  e0054003          AND      r4,r5,r3              ;58
00002c  e5814034          STR      r4,[r1,#0x34]         ;58
000030  e5914024          LDR      r4,[r1,#0x24]
000034  13844001          ORRNE    r4,r4,#1              ;60
000038  0004400c          ANDEQ    r4,r4,r12
00003c  e5814024          STR      r4,[r1,#0x24]
;;;63             data = data >> 1;      
;;;64             CLK_H;
000040  e5914034          LDR      r4,[r1,#0x34]
000044  e2822001          ADD      r2,r2,#1
000048  e20220ff          AND      r2,r2,#0xff           ;56
00004c  e3844b01          ORR      r4,r4,#0x400
000050  e3520010          CMP      r2,#0x10              ;56
000054  e1a000a0          LSR      r0,r0,#1              ;63
000058  e5814034          STR      r4,[r1,#0x34]
00005c  3affffef          BCC      |L1.32|
;;;65     	}
;;;66     	Lstr_L;
000060  e59f0164          LDR      r0,|L1.460|
000064  e5912014          LDR      r2,[r1,#0x14]
000068  e0000002          AND      r0,r0,r2
00006c  e5810014          STR      r0,[r1,#0x14]
;;;67     }
000070  e8bd0030          POP      {r4,r5}
000074  e12fff1e          BX       lr
;;;68     
                          ENDP

                  write_R4094 PROC
;;;76     *********************************************************************************************/
;;;77     void write_R4094(UINT8T data)
000078  e92d0030          PUSH     {r4,r5}
;;;78     {
;;;79        UINT8T i;       
;;;80        Rstr_H;
00007c  e3a01456          MOV      r1,#0x56000000
;;;81        for(i = 0; i < 8; i++)
;;;82        {
;;;83     		CLK_L;
000080  e59f313c          LDR      r3,|L1.452|
000084  e5914064          LDR      r4,[r1,#0x64]         ;80
;;;84             if(data & 0x01==1)
;;;85             	Rdata_H;
;;;86             else
;;;87              	Rdata_L;
000088  e59fc138          LDR      r12,|L1.456|
00008c  e3844c01          ORR      r4,r4,#0x100          ;80
000090  e3a02000          MOV      r2,#0                 ;81
000094  e5814064          STR      r4,[r1,#0x64]         ;80
                  |L1.152|
000098  e5915034          LDR      r5,[r1,#0x34]         ;83
00009c  e3100001          TST      r0,#1                 ;84
0000a0  e0054003          AND      r4,r5,r3              ;83
0000a4  e5814034          STR      r4,[r1,#0x34]         ;83
0000a8  e5914024          LDR      r4,[r1,#0x24]
0000ac  13844001          ORRNE    r4,r4,#1              ;85
0000b0  0004400c          ANDEQ    r4,r4,r12
0000b4  e5814024          STR      r4,[r1,#0x24]
;;;88             data = data >> 1;      
;;;89             CLK_H;
0000b8  e5914034          LDR      r4,[r1,#0x34]
0000bc  e2822001          ADD      r2,r2,#1
0000c0  e20220ff          AND      r2,r2,#0xff           ;81
0000c4  e3844b01          ORR      r4,r4,#0x400
0000c8  e3520008          CMP      r2,#8                 ;81
0000cc  e1a000a0          LSR      r0,r0,#1              ;88
0000d0  e5814034          STR      r4,[r1,#0x34]
0000d4  3affffef          BCC      |L1.152|
;;;90     	}
;;;91     	Rstr_L;
0000d8  e59f00f0          LDR      r0,|L1.464|
0000dc  e5912064          LDR      r2,[r1,#0x64]
0000e0  e0000002          AND      r0,r0,r2
0000e4  e5810064          STR      r0,[r1,#0x64]
;;;92     }
0000e8  e8bd0030          POP      {r4,r5}
0000ec  e12fff1e          BX       lr
;;;93     
                          ENDP

                  led_char_disp PROC
;;;101    *********************************************************************************************/
;;;102    void led_char_disp(void)
0000f0  e92d47f0          PUSH     {r4-r10,lr}
;;;103    {
;;;104    	UINT8T i=0;
;;;105    	UINT8T j=2,k=0;
;;;106    	UINT16T x;
;;;107    
;;;108    	for(i = 0; i < 32; i++)
;;;109    		dispram[i] = ~l_display_array[i];
0000f4  e59f20d8          LDR      r2,|L1.468|
0000f8  e59f70d8          LDR      r7,|L1.472|
0000fc  e3a00000          MOV      r0,#0                 ;104
000100  e3a05002          MOV      r5,#2                 ;105
                  |L1.260|
000104  e7d21000          LDRB     r1,[r2,r0]
000108  e2803001          ADD      r3,r0,#1              ;108
00010c  e1e01001          MVN      r1,r1
000110  e7c71000          STRB     r1,[r7,r0]
000114  e20300ff          AND      r0,r3,#0xff           ;108
000118  e3500020          CMP      r0,#0x20              ;108
00011c  3afffff8          BCC      |L1.260|
;;;110    	i=0;
;;;111    	while(i < 16)
;;;112    	{
;;;113    		Rstr_L;										// Enable RSTR
000120  e59f80a8          LDR      r8,|L1.464|
000124  e3a06000          MOV      r6,#0                 ;110
;;;114    		Lstr_L;										// Enable LSTR
000128  e28890f0          ADD      r9,r8,#0xf0
;;;115    		DisEn_Dataout;								// lock the data
00012c  e288a0e0          ADD      r10,r8,#0xe0
000130  e3a04456          MOV      r4,#0x56000000        ;113
                  |L1.308|
000134  e5940064          LDR      r0,[r4,#0x64]         ;113
000138  e0000008          AND      r0,r0,r8              ;113
00013c  e5840064          STR      r0,[r4,#0x64]         ;113
000140  e5940014          LDR      r0,[r4,#0x14]         ;114
000144  e0000009          AND      r0,r0,r9              ;114
000148  e5840014          STR      r0,[r4,#0x14]         ;114
00014c  e5940014          LDR      r0,[r4,#0x14]
000150  e000000a          AND      r0,r0,r10
000154  e5840014          STR      r0,[r4,#0x14]
                  |L1.344|
;;;116    
;;;117    		do {   										// Write the row data
;;;118    			j--;
000158  e2450001          SUB      r0,r5,#1
00015c  e20050ff          AND      r5,r0,#0xff
;;;119    			write_R4094(dispram[i * 2 + j]);
000160  e0850086          ADD      r0,r5,r6,LSL #1
000164  e7d70000          LDRB     r0,[r7,r0]
000168  ebfffffe          BL       write_R4094
;;;120    		}while(j);
00016c  e3550000          CMP      r5,#0
000170  1afffff8          BNE      |L1.344|
;;;121    
;;;122    		x=~(0x8000 >> i);	   						// Write one list data
000174  e3a00902          MOV      r0,#0x8000
000178  e1e00630          MVN      r0,r0,LSR r6
00017c  e1a00800          LSL      r0,r0,#16
000180  e1a00820          LSR      r0,r0,#16
;;;123    		write_L4094(x);
000184  ebfffffe          BL       write_L4094
;;;124    
;;;125    		En_Dataout;									// Output the data
000188  e5941014          LDR      r1,[r4,#0x14]
;;;126    
;;;127    		for(k = 0;k < 250; k++);
00018c  e3a00000          MOV      r0,#0
000190  e3811020          ORR      r1,r1,#0x20           ;125
000194  e5841014          STR      r1,[r4,#0x14]         ;125
                  |L1.408|
000198  e2800001          ADD      r0,r0,#1
00019c  e20000ff          AND      r0,r0,#0xff
0001a0  e35000fa          CMP      r0,#0xfa
0001a4  3afffffb          BCC      |L1.408|
;;;128    
;;;129    		i++;
0001a8  e2860001          ADD      r0,r6,#1
0001ac  e20060ff          AND      r6,r0,#0xff
0001b0  e3560010          CMP      r6,#0x10              ;111
;;;130    		j = 2;
0001b4  e3a05002          MOV      r5,#2
0001b8  3affffdd          BCC      |L1.308|
;;;131    
;;;132    	}
;;;133    }
0001bc  e8bd47f0          POP      {r4-r10,lr}
0001c0  e12fff1e          BX       lr
                          ENDP

                  |L1.452|
                          DCD      0x0000fbff
                  |L1.456|
                          DCD      0x0000fffe
                  |L1.460|
                          DCD      0x0000ffef
                  |L1.464|
                          DCD      0x0000feff
                  |L1.468|
                          DCD      l_display_array
                  |L1.472|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  dispram
                          %        32

                          AREA ||.data||, DATA, ALIGN=0

                  bmp
000000  bfffd801          DCB      0xbf,0xff,0xd8,0x01
000004  dbfbfedf          DCB      0xdb,0xfb,0xfe,0xdf
000008  7ee7a9f7          DCB      0x7e,0xe7,0xa9,0xf7
00000c  afbfefbf          DCB      0xaf,0xbf,0xef,0xbf
000010  d803dfbf          DCB      0xd8,0x03,0xdf,0xbf
000014  3f1fbea7          DCB      0x3f,0x1f,0xbe,0xa7
000018  b9b1a7bb          DCB      0xb9,0xb1,0xa7,0xbb
00001c  bfbfbfbf          DCB      0xbf,0xbf,0xbf,0xbf
000020  ffffedfb          DCB      0xff,0xff,0xed,0xfb
000024  edbbedbb          DCB      0xed,0xbb,0xed,0xbb
000028  01bbedbb          DCB      0x01,0xbb,0xed,0xbb
00002c  edbbedbb          DCB      0xed,0xbb,0xed,0xbb
000030  edbbedbb          DCB      0xed,0xbb,0xed,0xbb
000034  c5bb3bbb          DCB      0xc5,0xbb,0x3b,0xbb
000038  fbbbf7fb          DCB      0xfb,0xbb,0xf7,0xfb
00003c  effbffff          DCB      0xef,0xfb,0xff,0xff
000040  fbdffbdf          DCB      0xfb,0xdf,0xfb,0xdf
000044  0001fbdf          DCB      0x00,0x01,0xfb,0xdf
000048  feffe00f          DCB      0xfe,0xff,0xe0,0x0f
00004c  eeefeeef          DCB      0xee,0xef,0xee,0xef
000050  eeef0001          DCB      0xee,0xef,0x00,0x01
000054  fefffd7f          DCB      0xfe,0xff,0xfd,0x7f
000058  fbbff7cf          DCB      0xfb,0xbf,0xf7,0xcf
00005c  efe3dff7          DCB      0xef,0xe3,0xdf,0xf7
000060  fbbffbbf          DCB      0xfb,0xbf,0xfb,0xbf
000064  0001fbbf          DCB      0x00,0x01,0xfb,0xbf
000068  efbfe003          DCB      0xef,0xbf,0xe0,0x03
00006c  cdef9edf          DCB      0xcd,0xef,0x9e,0xdf
000070  5001dfff          DCB      0x50,0x01,0xdf,0xff
000074  dc07ddf7          DCB      0xdc,0x07,0xdd,0xf7
000078  ddf7dc07          DCB      0xdd,0xf7,0xdc,0x07
00007c  ddf7ffff          DCB      0xdd,0xf7,0xff,0xff
000080  efbfefbf          DCB      0xef,0xbf,0xef,0xbf
000084  ac03afbf          DCB      0xac,0x03,0xaf,0xbf
000088  83bf6801          DCB      0x83,0xbf,0x68,0x01
00008c  efefe3ef          DCB      0xef,0xef,0xe3,0xef
000090  cc012fef          DCB      0xcc,0x01,0x2f,0xef
000094  eeefef6f          DCB      0xee,0xef,0xef,0x6f
000098  ef6fefef          DCB      0xef,0x6f,0xef,0xef
00009c  efafefdf          DCB      0xef,0xaf,0xef,0xdf
0000a0  f77ff39f          DCB      0xf7,0x7f,0xf3,0x9f
0000a4  e7bfe801          DCB      0xe7,0xbf,0xe8,0x01
0000a8  cfffcc07          DCB      0xcf,0xff,0xcc,0x07
0000ac  afff6c07          DCB      0xaf,0xff,0x6c,0x07
0000b0  efffec07          DCB      0xef,0xff,0xec,0x07
0000b4  edf7edf7          DCB      0xed,0xf7,0xed,0xf7
0000b8  edf7ec07          DCB      0xed,0xf7,0xec,0x07
0000bc  edf7ffff          DCB      0xed,0xf7,0xff,0xff
0000c0  fefffdff          DCB      0xfe,0xff,0xfd,0xff
0000c4  e00fefef          DCB      0xe0,0x0f,0xef,0xef
0000c8  e00fefef          DCB      0xe0,0x0f,0xef,0xef
0000cc  e00fefef          DCB      0xe0,0x0f,0xef,0xef
0000d0  e00fffff          DCB      0xe0,0x0f,0xff,0xff
0000d4  f6ffd77b          DCB      0xf6,0xff,0xd7,0x7b
0000d8  d76d97ed          DCB      0xd7,0x6d,0x97,0xed
0000dc  f80fffff          DCB      0xf8,0x0f,0xff,0xff
0000e0  efdfefdf          DCB      0xef,0xdf,0xef,0xdf
0000e4  efdf0201          DCB      0xef,0xdf,0x02,0x01
0000e8  efdfebdf          DCB      0xef,0xdf,0xeb,0xdf
0000ec  e603cef7          DCB      0xe6,0x03,0xce,0xf7
0000f0  2f77ef6f          DCB      0x2f,0x77,0xef,0x6f
0000f4  ef9fef9f          DCB      0xef,0x9f,0xef,0x9f
0000f8  ef6feef1          DCB      0xef,0x6f,0xee,0xf1
0000fc  a9fbdfff          DCB      0xa9,0xfb,0xdf,0xff
000100  fefffedf          DCB      0xfe,0xff,0xfe,0xdf
000104  feeffeff          DCB      0xfe,0xef,0xfe,0xff
000108  0001feff          DCB      0x00,0x01,0xfe,0xff
00010c  fc7ffabf          DCB      0xfc,0x7f,0xfa,0xbf
000110  fadff6ef          DCB      0xfa,0xdf,0xf6,0xef
000114  eee7def1          DCB      0xee,0xe7,0xde,0xf1
000118  3efbfeff          DCB      0x3e,0xfb,0xfe,0xff
00011c  feffffff          DCB      0xfe,0xff,0xff,0xff
000120  fefffeff          DCB      0xfe,0xff,0xfe,0xff
000124  8001fdff          DCB      0x80,0x01,0xfd,0xff
000128  fbfff00f          DCB      0xfb,0xff,0xf0,0x0f
00012c  e7efd7ef          DCB      0xe7,0xef,0xd7,0xef
000130  b00f77ef          DCB      0xb0,0x0f,0x77,0xef
000134  f7eff00f          DCB      0xf7,0xef,0xf0,0x0f
000138  f7eff76f          DCB      0xf7,0xef,0xf7,0x6f
00013c  f78ff7df          DCB      0xf7,0x8f,0xf7,0xdf
000140  ffff0407          DCB      0xff,0xff,0x04,0x07
000144  6df76c07          DCB      0x6d,0xf7,0x6c,0x07
000148  5df75df7          DCB      0x5d,0xf7,0x5d,0xf7
00014c  6c07757f          DCB      0x6c,0x07,0x75,0x7f
000150  75b755af          DCB      0x75,0xb7,0x55,0xaf
000154  6ddf7ddf          DCB      0x6d,0xdf,0x7d,0xdf
000158  7def7d71          DCB      0x7d,0xef,0x7d,0x71
00015c  7cfb7dff          DCB      0x7c,0xfb,0x7d,0xff
000160  fffffbbf          DCB      0xff,0xff,0xfb,0xbf
000164  f9bffbbf          DCB      0xf9,0xbf,0xfb,0xbf
000168  f7dff7ef          DCB      0xf7,0xdf,0xf7,0xef
00016c  efe7ddf1          DCB      0xef,0xe7,0xdd,0xf1
000170  bcfbfdff          DCB      0xbc,0xfb,0xfd,0xff
000174  fbdff7ef          DCB      0xfb,0xdf,0xf7,0xef
000178  ee07c0e7          DCB      0xee,0x07,0xc0,0xe7
00017c  efefffff          DCB      0xef,0xef,0xff,0xff
000180  ffffc003          DCB      0xff,0xff,0xc0,0x03
000184  fffbfffb          DCB      0xff,0xfb,0xff,0xfb
000188  801bfffb          DCB      0x80,0x1b,0xff,0xfb
00018c  fffbc03b          DCB      0xff,0xfb,0xc0,0x3b
000190  dfbbdfbb          DCB      0xdf,0xbb,0xdf,0xbb
000194  c03bdfbb          DCB      0xc0,0x3b,0xdf,0xbb
000198  dffbffeb          DCB      0xdf,0xfb,0xff,0xeb
00019c  fff7ffff          DCB      0xff,0xf7,0xff,0xff
0001a0  f83fe7cf          DCB      0xf8,0x3f,0xe7,0xcf
0001a4  dff7bffb          DCB      0xdf,0xf7,0xbf,0xfb
0001a8  b39b739d          DCB      0xb3,0x9b,0x73,0x9d
0001ac  7ffd7ffd          DCB      0x7f,0xfd,0x7f,0xfd
0001b0  6fed67cd          DCB      0x6f,0xed,0x67,0xcd
0001b4  b39bb83b          DCB      0xb3,0x9b,0xb8,0x3b
0001b8  dff7e7cf          DCB      0xdf,0xf7,0xe7,0xcf
0001bc  f83fffff          DCB      0xf8,0x3f,0xff,0xff

                          AREA ||area_number.6||, DATA, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.data||
                  cTemp
000000  00                DCB      0x00

                          AREA ||area_number.7||, DATA, ALIGN=0

                          EXPORTAS ||area_number.7||, ||.data||
                  cEnChange0
000000  00                DCB      0x00

                          AREA ||area_number.8||, DATA, ALIGN=0

                          EXPORTAS ||area_number.8||, ||.data||
                  cEnChange1
000000  00                DCB      0x00
