; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\sdram\led16x16.o --asm_dir=.\SDRAM\ --list_dir=.\SDRAM\ --depend=.\sdram\led16x16.d --cpu=ARM920T --apcs=interwork -O3 --diag_suppress=9931 -I..\Common\Inc -I.\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Samsung -D__UVISION_VERSION=517 --omf_browse=.\sdram\led16x16.crf Source\led16x16.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  char_out PROC
;;;138    *********************************************************************************************/
;;;139    void char_out(u8 font, u8 *str)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;140    {
000004  e1a04001          MOV      r4,r1
000008  e0801080          ADD      r1,r0,r0,LSL #1
;;;141    	u8 *str_ptr;
;;;142    	u8 glyph;
;;;143    	
;;;144    	glyph = ( u8 )*str;
;;;145    	
;;;146    	while(glyph != '\0' )
;;;147    	{
;;;148    		str_ptr = fonts[font].ascii_code + ( glyph - fonts[font].ascii_beg) * fonts[font].ascii_height;
00000c  e59f0238          LDR      r0,|L1.588|
000010  e0805101          ADD      r5,r0,r1,LSL #2
000014  e5d40000          LDRB     r0,[r4,#0]            ;144
000018  ea000006          B        |L1.56|
                  |L1.28|
00001c  e5d51008          LDRB     r1,[r5,#8]
000020  e5d53001          LDRB     r3,[r5,#1]
000024  e5952004          LDR      r2,[r5,#4]
000028  e0400001          SUB      r0,r0,r1
00002c  e0202093          MLA      r0,r3,r0,r2
;;;149    		refresh_assic_buffer(str_ptr);
000030  ebfffffe          BL       refresh_assic_buffer
;;;150    		str++;
;;;151    		glyph = ( u8 )*str;
000034  e5f40001          LDRB     r0,[r4,#1]!
                  |L1.56|
000038  e3500000          CMP      r0,#0                 ;146
00003c  1afffff6          BNE      |L1.28|
;;;152    	}
;;;153    }
000040  e8bd4070          POP      {r4-r6,lr}
000044  e12fff1e          BX       lr
;;;154    
                          ENDP

                  led_init PROC
;;;163    *********************************************************************************************/
;;;164    void led_init(void)
000048  e3a00456          MOV      r0,#0x56000000
;;;165    {
;;;166    	rGPBCON = rGPBCON & 0xfff0ff | 0x500;     		// GPB4,GPB5=01:Output
00004c  e5901010          LDR      r1,[r0,#0x10]
000050  e3c114ff          BIC      r1,r1,#0xff000000
000054  e3c11c0f          BIC      r1,r1,#0xf00
000058  e3811c05          ORR      r1,r1,#0x500
00005c  e5801010          STR      r1,[r0,#0x10]
;;;167    	rGPCCON = rGPCCON & 0xffff3ffc | 0x4001;     	// GPC0,GPC7=01:Output
000060  e5901020          LDR      r1,[r0,#0x20]
000064  e3c11903          BIC      r1,r1,#0xc000
000068  e3c11003          BIC      r1,r1,#3
00006c  e3811901          ORR      r1,r1,#0x4000
000070  e3811001          ORR      r1,r1,#1
000074  e5801020          STR      r1,[r0,#0x20]
;;;168    	rGPDCON = rGPDCON & 0xffcfffff | 0x100000;     	// GPD10=01:Output
000078  e5901030          LDR      r1,[r0,#0x30]
00007c  e3c11603          BIC      r1,r1,#0x300000
000080  e3811601          ORR      r1,r1,#0x100000
000084  e5801030          STR      r1,[r0,#0x30]
;;;169    	rGPGCON = rGPGCON & 0xfffcffff | 0x10000;     	// GPG8=01:Output
000088  e5901060          LDR      r1,[r0,#0x60]
00008c  e3c11803          BIC      r1,r1,#0x30000
000090  e3811801          ORR      r1,r1,#0x10000
000094  e5801060          STR      r1,[r0,#0x60]
;;;170    }
000098  e12fff1e          BX       lr
;;;171    
                          ENDP

                  adc_test PROC
;;;174    
;;;175    void adc_test(void) 
00009c  e92d41ff          PUSH     {r0-r8,lr}
;;;176    { 
;;;177    	volatile UINT16T unPreScaler;
;;;178    
;;;179    	int i,j; 
;;;180    	UINT16T usConData; 
;;;181    	float usEndData;
;;;182    	char *x;
;;;183    	char str[10];
;;;184    	uart_printf(" ADC_IN Test\n"); 
0000a0  e28f0f6a          ADR      r0,|L1.592|
0000a4  ebfffffe          BL       uart_printf
;;;185    	uart_printf(" ADC conv. freq.  = %dHz\n",ADC_FREQ);
0000a8  e59f11b0          LDR      r1,|L1.608|
0000ac  e28f0e1b          ADR      r0,|L1.612|
0000b0  ebfffffe          BL       uart_printf
;;;186      unPreScaler = PCLK/ADC_FREQ - 1;
;;;187    
;;;188    // Enable prescaler,ain0,normal,start by read 
;;;189    	rADCCON=(1<<14)|(unPreScaler<<6)|(0<<3)|(0<<2)|(1<<1); 
0000b4  e59f11c4          LDR      r1,|L1.640|
0000b8  e3a00013          MOV      r0,#0x13              ;186
0000bc  e3a04316          MOV      r4,#0x58000000
0000c0  e1cd00bc          STRH     r0,[sp,#0xc]          ;186
0000c4  e1dd00bc          LDRH     r0,[sp,#0xc]
0000c8  e1810300          ORR      r0,r1,r0,LSL #6
0000cc  e5840000          STR      r0,[r4,#0]
;;;190    	uart_printf(" Please adjust AIN0 value!\n"); 
0000d0  e28f0f6b          ADR      r0,|L1.644|
0000d4  ebfffffe          BL       uart_printf
;;;191    	uart_printf(" The results of ADC are:\n"); 
0000d8  e28f0d07          ADR      r0,|L1.672|
0000dc  ebfffffe          BL       uart_printf
;;;192    	usConData=rADCDAT0&0x3FF;
0000e0  e594000c          LDR      r0,[r4,#0xc]
;;;193    
;;;194    // Sample and show data by UART
;;;195    	for(j = 0; j < 20; j++) { 
0000e4  e3a07000          MOV      r7,#0
                  |L1.232|
;;;196    			while(!(rADCCON & 0x8000)); 
0000e8  e5940000          LDR      r0,[r4,#0]
0000ec  e3100902          TST      r0,#0x8000
0000f0  0afffffc          BEQ      |L1.232|
;;;197    			usConData = rADCDAT0&0x3FF; 
0000f4  e594000c          LDR      r0,[r4,#0xc]
0000f8  e1a00b00          LSL      r0,r0,#22
0000fc  e1a00b20          LSR      r0,r0,#22
;;;198    			usEndData = usConData * 3.3000 / 0x3FF; 
000100  ebfffffe          BL       __aeabi_ui2d
000104  e59f21b0          LDR      r2,|L1.700|
000108  e59f31b0          LDR      r3,|L1.704|
00010c  ebfffffe          BL       __aeabi_dmul
000110  e59f31ac          LDR      r3,|L1.708|
000114  e3a02000          MOV      r2,#0
000118  ebfffffe          BL       __aeabi_ddiv
00011c  ebfffffe          BL       __aeabi_d2f
;;;199    			uart_printf(" %0.4f ",usEndData); 
000120  ebfffffe          BL       __aeabi_f2d
000124  e1a06000          MOV      r6,r0
000128  e1a05001          MOV      r5,r1
00012c  e1a02006          MOV      r2,r6
000130  e1a03005          MOV      r3,r5
000134  e28f0f63          ADR      r0,|L1.712|
000138  ebfffffe          BL       uart_printf
;;;200    		  sprintf(str,"%0.4f",usEndData);
00013c  e1a02006          MOV      r2,r6
000140  e1a03005          MOV      r3,r5
000144  e28f1f61          ADR      r1,|L1.720|
000148  e1a0000d          MOV      r0,sp
00014c  ebfffffe          BL       __2sprintf
;;;201    		  x=str;
000150  e1a0100d          MOV      r1,sp
;;;202    		  char_out(0,(u8*)x);
000154  e3a00000          MOV      r0,#0
000158  ebfffffe          BL       char_out
;;;203    			usEndData = usEndData - (int)usEndData; 
;;;204    			for(i = 0; i < 4; i++) { 
00015c  e3a00000          MOV      r0,#0
                  |L1.352|
000160  e2800001          ADD      r0,r0,#1
000164  e3500004          CMP      r0,#4
000168  bafffffc          BLT      |L1.352|
;;;205    					usEndData = usEndData*10;
;;;206    					usEndData = usEndData-(int)usEndData; 
;;;207    			} 
;;;208    			delay(5000); 
00016c  e59f0164          LDR      r0,|L1.728|
000170  ebfffffe          BL       delay
000174  e2877001          ADD      r7,r7,#1
000178  e3570014          CMP      r7,#0x14              ;195
00017c  baffffd9          BLT      |L1.232|
;;;209    		} 
;;;210    		uart_printf(" End.\n");
000180  e28f0f55          ADR      r0,|L1.732|
000184  ebfffffe          BL       uart_printf
;;;211    	}
000188  e8bd41ff          POP      {r0-r8,lr}
00018c  e12fff1e          BX       lr
;;;212    
                          ENDP

                  refresh_assic_buffer PROC
;;;122    *********************************************************************************************/
;;;123    static void refresh_assic_buffer(u8 *str)
000190  e92d4070          PUSH     {r4-r6,lr}
;;;124    {
;;;125    	copy_data(&assic_buffer[0], &assic_buffer[16],16);
000194  e59f4148          LDR      r4,|L1.740|
000198  e1a05000          MOV      r5,r0                 ;124
00019c  e3a02010          MOV      r2,#0x10
0001a0  e2841010          ADD      r1,r4,#0x10
0001a4  e2840000          ADD      r0,r4,#0
0001a8  ebfffffe          BL       copy_data
;;;126    	copy_data(&assic_buffer[16], &assic_buffer[32],16);
0001ac  e3a02010          MOV      r2,#0x10
0001b0  e2841020          ADD      r1,r4,#0x20
0001b4  e2840010          ADD      r0,r4,#0x10
0001b8  ebfffffe          BL       copy_data
;;;127    	copy_data(&assic_buffer[32], str,16);
0001bc  e3a02010          MOV      r2,#0x10
0001c0  e1a01005          MOV      r1,r5
0001c4  e2840020          ADD      r0,r4,#0x20
0001c8  ebfffffe          BL       copy_data
0001cc  e3a03000          MOV      r3,#0
;;;128    	l_display_scroll(assic_buffer);
0001d0  e2840000          ADD      r0,r4,#0
0001d4  e244c020          SUB      r12,r4,#0x20
0001d8  e3a02008          MOV      r2,#8
0001dc  e1a01003          MOV      r1,r3
                  |L1.480|
0001e0  e4d05010          LDRB     r5,[r0],#0x10
0001e4  e4d04010          LDRB     r4,[r0],#0x10
0001e8  e1a06315          LSL      r6,r5,r3
0001ec  e1864234          ORR      r4,r6,r4,LSR r2
0001f0  e7cc4081          STRB     r4,[r12,r1,LSL #1]
0001f4  e08c5081          ADD      r5,r12,r1,LSL #1
0001f8  e5504010          LDRB     r4,[r0,#-0x10]
0001fc  e2811001          ADD      r1,r1,#1
000200  e3510010          CMP      r1,#0x10
000204  e450601f          LDRB     r6,[r0],#-0x1f
000208  e1a04314          LSL      r4,r4,r3
00020c  e1844236          ORR      r4,r4,r6,LSR r2
000210  e5c54001          STRB     r4,[r5,#1]
000214  3afffff1          BCC      |L1.480|
000218  ebfffffe          BL       led_char_disp
00021c  e3a04012          MOV      r4,#0x12
                  |L1.544|
000220  ebfffffe          BL       led_char_disp
000224  e2544001          SUBS     r4,r4,#1
000228  2afffffc          BCS      |L1.544|
;;;129    }
00022c  e8bd4070          POP      {r4-r6,lr}
000230  e12fff1e          BX       lr
;;;130    
                          ENDP

                  copy_data PROC
;;;108    *********************************************************************************************/
;;;109    static void copy_data(u8 *dst, u8 *src, u32 size)
000234  ea000001          B        |L1.576|
                  |L1.568|
;;;110    {
;;;111    	while(size--)
;;;112    		*(dst++) = *(src++);	
000238  e4d13001          LDRB     r3,[r1],#1
00023c  e4c03001          STRB     r3,[r0],#1
                  |L1.576|
000240  e2522001          SUBS     r2,r2,#1
000244  2afffffb          BCS      |L1.568|
;;;113    }
000248  e12fff1e          BX       lr
;;;114    
                          ENDP

                  |L1.588|
                          DCD      fonts
                  |L1.592|
000250  20414443          DCB      " ADC_IN Test\n",0
000254  5f494e20
000258  54657374
00025c  0a00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L1.608|
                          DCD      0x002625a0
                  |L1.612|
000264  20414443          DCB      " ADC conv. freq.  = %dHz\n",0
000268  20636f6e
00026c  762e2066
000270  7265712e
000274  20203d20
000278  2564487a
00027c  0a00    
00027e  00                DCB      0
00027f  00                DCB      0
                  |L1.640|
                          DCD      0x00004002
                  |L1.644|
000284  20506c65          DCB      " Please adjust AIN0 value!\n",0
000288  61736520
00028c  61646a75
000290  73742041
000294  494e3020
000298  76616c75
00029c  65210a00
                  |L1.672|
0002a0  20546865          DCB      " The results of ADC are:\n",0
0002a4  20726573
0002a8  756c7473
0002ac  206f6620
0002b0  41444320
0002b4  6172653a
0002b8  0a00    
0002ba  00                DCB      0
0002bb  00                DCB      0
                  |L1.700|
                          DCD      0x66666666
                  |L1.704|
                          DCD      0x400a6666
                  |L1.708|
                          DCD      0x408ff800
                  |L1.712|
0002c8  2025302e          DCB      " %0.4f ",0
0002cc  34662000
                  |L1.720|
0002d0  25302e34          DCB      "%0.4f",0
0002d4  6600    
0002d6  00                DCB      0
0002d7  00                DCB      0
                  |L1.728|
                          DCD      0x00001388
                  |L1.732|
0002dc  20456e64          DCB      " End.\n",0
0002e0  2e0a00  
0002e3  00                DCB      0
                  |L1.740|
                          DCD      ||.bss||+0x20

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  l_display_array
                          %        32
                  assic_buffer
                          %        48
